%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/jesus/Documents/LaTeX/JARMTL44/JARMTL44.dvi
%%CreationDate: Thu Nov 23 17:13:16 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR17 CMTI12 CMR12 CMR10 CMBX12 LINE10 CMMI12 CMMI8
%%+ CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ C:/Users/jesus/Documents/LaTeX/JARMTL44/JARMTL44.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.23:1113
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D491A1FDD60F7230D5D725D21F531072155D5CA
12045C71F375116E93825D964FE24E272B239E8E12DB85368F11963CBB4E2B4B
EA559F6A1FED7DDAE902017290E4549337A9F6CC3109F1F858213AF70573323B
78B9F56D9A2D6E6BD0FB038E6B0AEB661D95D1669D49D7E93A21C76C8E0B29CA
73D10BB805BC9D2D488FB292E1D014B47ED472B3DD4819A2CB3E370EEE819BCD
8C722A1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /theta put
dup 105 /i put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF7785FCA8F089152A57EB8D
5467C28AD44E890380CEA0B0E0CD0F6427F2C3BC1A5257BF03D902BE94A449C5
EB8F33DD607BB4E0A1A7A24431E1DC2F03596EB2039CC1A9D524E10B374E34A6
4DFE6694F9E158DD6678BCB0B56BFF435FC4F5EC442E14391B45178DDA235B7A
07AB6EA76230B60456344BDB08C929F9453553452C97E016C26C11B68186024C
D1AF6C638EF54E26AA88856FAF1FA9A0DC5A9EFB7130EE72EB3313510EDB1DF4
8D8E512036A986387D8E96689E912149A342974F559E7CA473A1FD2E01CB1197
990EDF8444CC83F1AF738200D6B01348FC84249D77FD2C3792BE507B455AA8C4
8A47C53FF9832AE74389132337E4FEB6F45B5BB29D6F597BA179C6592145F301
A46ACFAB07818BBBF40FFCBD118D4DD0F87D65E1D0E9B88EC830AFE34BAD1526
2CE90D193D88877AE17FF093AFF181232A335E7A2B13520FE2DFDF2600CDDAC6
68C0665D9A85BE2D2CB92AA47DBC9DC58C73FE498C0188AB7FECB942C019740E
545F68F08610E908AD44F0692AB573634DB703EC5B7AEB112B68ACBEB1C54F88
D715C1F56885B3EA03D98953EDB5430B34A1B9E81A4408D362312CF6A3C38A3E
255C803D47BB46D83947A94ECF9461F1C19CCC4A91B2C7037331F67A0B8489B6
689DB6A109AAD3BD3E91929F0CA2C6B8BAB7FD12D8392E11A4BA511FBE467777
D9F456DA728B94C2B0A8CC17D2AA45672F610D0CDD386AE190C21AE39DEA6FA3
44893ABD9607B3130F4A4B093EF09BCBACC9AD8247CBE6B86BA5BB6598A0BD1C
6CA2EB75F51E6A4A70A6CE4BA442EEB6711E0EDD7AF881B3D3E654F6461DB8AC
FE60FF552DD3EAC48EC06E3CC43FB609749A93F18A899DE2550C3D1CE9D98E23
935B18A02B338FEBC9A6BD6888C0D71B8F4AB36D5C4AB2F2B4B3330EF21A8025
62B464EBDE5199AC7F3071117206F9939EC14224035AA41DF924825AEFF29979
6BC14771306DA6FD140974D2E0A851B35775F0E91C47
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /theta put
dup 59 /comma put
dup 73 /I put
dup 82 /R put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709006B68486B326967A28D
41E878EF9CDFFA015BFD11310CB2305640182A131B96D73348B7ED8D31A29D7F
2D889D8EC4F6C7A55DD179594ABED611CE4DE790CDDCB68CC677A362B879F4A7
F4F84113A561F6D170454B0DC4DB2F973E21176E5B00D0774F0BDB3F0E22D753
FDC635611AC85411D57FCE2CC85BB5DAE17BC41F3C1E5CA1BE272ECDEC1C574E
E68E33D269E90877555B1E9AF694D44B85295968D0CCDAC4B5EEFD6E6F284597
DC1016F2D7502E91FD71BA624C499BC62FE7B4734070F8C123A633E51596A0ED
00F273E0DD044A7DF055D633040BF5853FE171E3442C0A00DD938476920CF678
69A9DDF5A29AACE82231873F15E4EA92B37F9045EB711B4939EBC0785F347643
5792033AB924266D8734301BA52C5192F8B32AE780CC9D48C832833999E78819
CC4FEBEAAAD11210EA3D220AC1798A5781DFBE3E47C31D0B5A0B87147FFD44C2
0F4FEF9B7C06072E0398F740D8BBD3FB1B9920AE84C085461C1F5C08F4251173
001AC878E423340D008E73A1F49B6058DBD668C43C513C35AE8144FD672DF548
C439A883086F14F419820F312F3127097B59ECB9ED4D16EFFBCCFF0CF648981B
B0F888C510C0CB3C45918E92417F6CC39A8288A88398390816BB3FAC62D2051C
CCC0A389D730EAD6B05AD28D4311178DFBFE442372B08A31D416B78B71520456
64620D9D0A3FA3E8BA66A32F7839E4410B48557459EB0918274A879B02E0392E
5AF97B16F09D2B8A3B514BC1BB5467D359020C43A00570AAEBD3DBF637154F71
9A636A9700C081553E214361B2B57EDA19BBCCF098E1870D0846736F0649DCA8
FCCCB124E1FADDFAF3D5925CEF54EFE72CD0D2BDB735D18B4103C1DBDCD8EACB
15EA2822AC4D8AFF79F1746B14ACDB6FC83D45B9D3E972710DEF408694402960
947DA3B6BF54DA82FFEBC510725C300BA2FB19A603ECB41DC86E8ACD2DA44C5D
157E7B53ABA05461DA40B675F081053377364DEE80EF49C4B5909FE549B798B4
96C226DC16A18A9DE663612661F780459D9932AF482B5E2351E3BADBEFFD4B49
D5E120C8C3C96A3D38A88E5D4A9559465191677CFAF1B1BE5B9FD0D277D5AFB4
8E827DD0B979E7FA7FE01325199C2F208A02EE453F545DC69D66B1ED9262133F
9C47E58A0E5014E9C2670788FA0F0A5CB372B84435B4041597A8A5773046E924
6DB111C8DC2DF76A47C644BCF5AE4D4B413EB0AC2EC4684B0A43C27EEB591A20
FC3A54B30B97687A68132FE1D54AF1CF3B8106818B86D27EAC3EEBE036BF4834
ADA8515C4A4972910354AB20C935E0EA158B8AA75E645F5A8D84FB1C177AED50
2F9F054D68CB91DE636908DAEB2F796C0F267E8D7F4E2B82093323981CE48D06
BE4D1495247B1EC6571E5D15825D479AF0E6EDE3188F329E2CDA61D7589E2C45
A6B2402D0FC042A07E5EA2F5E4BC9CAA44ECE8FD86CA6D47F28C20CEB6AAE822
31873F15E4EA92B37F9045EB711B4939EBC56620BD253E4F8EBA8FA68830E6BD
9979FD51C83559413AE5BD9D06F88A3574A72969772F72DF892FCC899E8F1550
2C854FC683452DF039B9F393754016460708B44454A8FDE2E5892550E76F665A
8068F8E3CA11C07A1E21423B0CA22524202624BBD2D4042E32532A21BCFBF270
9E1050E43019FD6819999E1A5C2FA6373B042ADB926EC8CC9BFFE37D3A7B41CA
CEDF26EBA920B180CC4F6E2E9E73D5148A0EA43D89ACD8EDEAAF7C7F8FE3160E
3A68C5B2F1EA996FE71CF6D1E942BEE942C4045B6AAE9C67CAAE00C38A47778D
8066A1504843D40BD9661B60F70E45003BAD9D9D2E21F089404F7AF2BFBB14E0
A8B4038F64AB9A580FFE823D01E712637F0B20D61154F602EAFF07497747A8FB
1C2BF49F971465D919B5AC6BAA5892AA64FC717549E96BAF978A9BD19631D3BD
3CA1024CF023094B1B557FEB40BC3B0CCA05602F274112C7FF5C675F7225DA98
CF5F4AE8C46467359A01960E0DC22B6D906234C959C39349DAED4C8765CAE526
70848E0AB53C41A3E17B8576C15F1D04CDBE12C3C0F3E07B3F93E8BD7ABD743C
DCB717E3D11BABFB7F10D393C0756CCAD2DC7A7AAE7448F0F854FD16C7A052D7
43789B2816E724A4A7D34B1BF2680108C2B01A0BF3318AE7383E3B429878EC69
9B44BFC93ADFA745DD4F14EB1BD29562790D58AE5CAF750125F0A73E18634A59
24189CC8A4DDE65F736731A1A5FA85CD3B89D6A2BF7426F86164439A5F8C68A0
4D1F9FEA36B84380DBF6C8D2BCA09907689E13A062911273F69A507D1ED2FB57
FBA22568F89A7D412FEDB53D78F5777C598BB632925394C4242BE857508042A0
5F677B037A91A2D52E73788BAF8B8AE79C88FA686D2060F42DAF8D28A3EA0725
576745A3112C86B37377C8B8DE4E6950341F6242FA7B7F4C9EE8B2F73A973B04
BCCB0ADE71CB4C58E3AF11DC133DC1C7E52B67BF4C5A2FD21084B41FCB9E34F0
D2923608C569EC94112798BB461E678444A54B3FEAA2C04C5A808DB440B0F4A6
03DAF4B085CD89B8295A2C57C480A74A3963B2C190E645404C811C285E1B2987
831AF45A714FCD18A45ED27415F3D5C50DA27BD5F2C643887D448F861D11EA94
7CC3D29B79823F4C580F80546B2D286940200961CADA67D7FFA17D28366466B3
10634F59DE6B1BEEBE3B80EBC17BCE4A3CDC4F168A81C4553A15994801780050
35D8257DC7A887453C7CC2B46862CD140B7F0090BBC403BA662AE2CB3480ABD9
D0E07E99DFAA7ED424C0A2C14974A5AE4CD4E94F1BBC215EC41AAB753CCA2123
72DF073FCCEAB2A275E16F51C82A2CBBC9053A2E078820799024DCCD35EF0BA6
1FE4D103381FA819349F4DE3F724480E0761EA3C64B6A4F2E3B9A7455C73CF99
D4FC15CC4E2FFDB11CD56C15851145FCD0497D89C38BF35D264A5EAE10519DA9
021DCE037526329598EA38A23AC6E8D22AAC361506AECD98EBBA5E7524B04B9A
8B73926B0F14AD41FEFFFA340911E7F047483534B9FD2C254F1D4080B0B083A4
DDDE33A76FC36C5595EF7E55D640AD6D6CF32E42C98129AA1162B15939694E8B
30940D3E07EF08D0E43FBE8E04E4487709956BFB40131EE1CC20E40DFD2C217E
6ED9618A8FB1B5E995E7DF62889775EA98D3AED59B121D43AE1C8F979FBE7BD8
CD09F3253FEFED42234933A7712801E6FA40905A5C4770C89899376C13247CEB
CC8014673C7486C35E53B9DC9835D958E8C00FC283E4EFD3125025D73454C888
38BD339823AF3C0BA391DD9EDB7037084C522715A6B6AF9510AA322ED388E449
11A4ECF11F524092889C823D142AAEF99C147C0A7083E63E3BAFFF4725CD1908
0052B197665B40764D700EA478C2C3C97BBB9905A401B720265643D23C82CA01
B44E56B9A90E7E6A581531EB77842D54EFEA3136F0FEDF407F3663D1722DE28D
AE265C459B1E77837AC5CEB83CCE3E507F68C3A68ABBB766C01B0A8FB65D8817
D9D1EF2FA0DB4A7A5789048F4D45CDFDE369C4158E81EC883CA3DDF27DFFE49D
D24637985E6836D30404DC62B3AAF88B81C48E6E92F3F0CF0950EDF9F6498656
7A003BE73956586C1705AE3109B7CC9B1372FEE8EE25783BBCDD6BE25C32974D
2B7D24B3064CDD8346E9A7802A412BEF38D0E1A55962660AA4900B670D6CACC8
6043403BCE54B46A7512F3C55913C63B6E3DF343DBE5C4E2D39A5FAB0E3C6C8F
7F0D3C291A3211D919AE924BBBDB8E2CC6B732F3E07E99C71B50C58BE400174A
B9C558B430545714D0775C50A431CF28A894D7D50FF47D7D6CF3B2D24AE170A0
A7800DD38711F890ECA539572F50DDE5B80E431F27FDE5A5471EF8F7F3369474
C2DB837C673C201D23D858B1AF80BFE95D8B61E97BBCE4FE144D3592249152B0
F1A0A215AF46BC0BA95964668C2E672239750CD0B37095E07AD82065176743F5
A8B0C0FB6395042C2EB1CC635FD8A475CD83EA528BE8ABE56EA10AC5E6A7009A
9C5034AD5392FF9905063B5AF16131DB63028B70D880A1856591108F2DF524E8
BFF4E53C36E13DD2BC81514A6D62077C6AB5F7A2E1B096A4512BBA9C4C196A85
7EE961100B373AF3203FD72F4C317BD73292FD428CCF0058363BF4F9D9B7B65A
99FAFC68016543ED604AC590DB8E659EC40DF60221E71CD0AE2FE4778210D32A
5B3C2CD46359194556BC018F56E179A581DBC26C0C056B68FAED1D49023E65A9
45798CB73570FCCED91C59C5892A0CBF3F8F181CF5F527BF79510E06DE06FC24
A13B0EF57B106C003C4C8C202D2928E61384EADFCC6B69763A217E0EFF551F8A
FAB0BA8F48128D9CEE59DAA408BF4CF659C6C2F60C5AEC37652A6707611FC6A6
4F2D37435E59BFD4C420DAD4B6E8B297A0666519C48AA11245881C898668A237
08A04595E28E22E6EECF5ADA5C75DC22E72E0076B1CAC58884220E45ABF6A6E3
57BFB329747E75DFABD656D1485B5CBFA173FB4E17CEECCC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 27 /a27 put
dup 45 /a45 put
dup 54 /a54 put
dup 55 /a55 put
dup 63 /a63 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE26830460276B4BD469AF1C121
85BD1EA99DC9BEA1408FB7959B8DDD014B39441A15A600BB988B0FB792897D17
36BF66EC53349C40FF7BC1C80599282DD5EE8CA44E95821CDBFB9E1933E487D3
8CB7BC7237C5D061C6C4F18D88F7A17BA00F1124C43E91F0C7DFA4351A1A4B4F
CCFB65C3CC64BC171580257A31A5D2BFD6B31C0D69AF4A6A67C8726A939D8C88
90C2C0EF26128A9C70A50BC4BE54A026CE71A28D8D418B84C3D423E89625436E
4F714EA0FCFBDE1FDE7BD992B553A66D7D0D6A5ACA09C4976BC083D2EC1FD93C
8868AC24FA2517E2E3A82A42E483B7270586791144F8E83D9214A8D0A5A26A4E
A1962C2E2711D842009DF9CD5B6E9958E09C68CB1821CA5098C91FEAFD674D9E
35080D9074B5F28CA414251CE3A64C71B218B4ADF35CBD7F037BAF8176C468D4
0AD2B6626BA9D951CE402700E4F6522AC9D84CA0FF7CB81281398B67CD5C2335
268418D3EEB6782C3B458A8362D1E235AD55D0DD8ECD0E5442AA247CE568B812
8393A8CFB66A824AA3EDF73932CE7D7683D15ED91B8D0365D9AD996A8501C8FE
AAC8D59295873E8C85D2F8AB45E90B3FD3F287B524C850B3E48D8C9757D1D834
94015D55DBCF1E8B5CB3444F9AF78B8E85B8CB13D0AA8F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 69 /E put
dup 70 /F put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70CCD429EF7488E7E5C782C8311B03F19DC37
7EF382AEBDC3130A05259B885E07B50701A7A98C5B2D07896534AD7BCA233A7D
21FDCC48F92986F516F8F0DA75C9221E3F45BC7A8F8AF3361EE4B989D3A78C6D
26DAAB0F7B3A0929E77768E18E2BF673AFAFFCB988137604535CD7E8451B695C
1421F3099CCD799C248748B69744488D58DBD6987F38F39CB29E5BDB6D3F9AEB
54D467C5308CE20E32B10AED6D5FCA91270C5367C18CCF4DEAD10B4729E5749A
10EDBE644886443D12492C82FF0E6DB7C8002485CB219AD28EDFC182186DE646
24740D93FA043EF73B6EF6100F17692C56D27F54C2095AE9C881F552D504898E
6CA7188C9972A746700E2B42CB2337D20DB6CFC489CCE5FA1C86BBBE953F94E6
11869DB7780E15D83785254F9F28377E1DF6D8848A87CB80E4882F1A07C45874
AFF8432C48D8C6953A5C3B4BF29D95553131D061275726979FF861B2C807D256
70660453127BD2C61C0126CA28AD556E78609CBE62784BFC503E2CCB3790B57B
9AD7CE0DC77A484B04049A86864C41CD6850C6377C3653C2544762A7CD95E7AA
662EB895707386305CAD2FDA90C2F61DF261CE1850DE92F9554E6393DE6E12B5
25D45A9A51D740B3A9A7FB491CF98C32617968881D8256AABDA5DC045B51DF18
64FAB4103E866F5647D1FEF714B1F36140D2188E65E177DD1ADF878E23C9EC00
9709740D316CC459CC2B96CC2CA3E4CE1962063DEE53C8DA4DAA35904D6F58ED
3709634144FB6B0F00842514CF6894C1AE2C4034A6DE3F84515065F649FE81E6
B37B7ABDD9A9AEF976029BF61D01169F483BFF4B526001DCA2275268677D858A
8511434D02DD28B6812956250614394F946D6A1137D542207EAF297D002B7CC4
9EFDC6DA57A8F80C41130E5C36BB63EB07C044890B29F418C4159AB89C06F83A
212D58975830D323726526F7E7823211DDA3ABF3C44CE68524CCED0324900493
8BB6F439F3237E900CA9D81856288366086FEF836E65A198871F80EC6539351C
903F033CBFF1AC1BB9625D6FC5E16688043DE781C91F68D5A312AD78C0FBF906
37AA3824BF96914F5F47E253F021741C4F8F4EDE3026B6DE493B8069F0421EC0
453E04D3D09B8F5951E5D03F0095894F6243F0133CE8D875EB432C558B2083AF
89F48C8A8EA8A006A2E207177FF28A957E8F68A4EF9DD7C772F86808031FBA80
F13664F07FC38A52CE331E53B438DD7D05A6BFEAAEAC473746B11FD0B07586FE
0B4DAEDE0BF6A6343E00E7A509DC3C3CCE1F358967655FA6418D68A6DC0CADE9
F6833C41550A0BEB8DB10CC4BB3CBC927E4C66CB5912EE84896264E4DBA7576F
63F031275AE4666A5D1E278035F2D2A458D78BE99FB5B8B33267A53C75F85B24
84F8B3159D01342EB47859AA58BAC17D68306FE4B078A34C4087825CECD910DC
514AB2421E246F66F0EF3F1F3FFCEE497A3BBE4BA3340D25096CF324EE5FA3A2
26DC8131D417CE2BA75411474F49B6DB19FF83B39CAAE943E4F0AC71C7159A1D
A64EA2C0E3DD3225866D03C9200237768C6EBC55F9748663BBA7BFFFE5C9B0DB
8E8480596F267D8E6391D8B3CF07D3CAFD91DD83379791DC4BC8E5B34B1D7178
D129DB244C71DFE1A1B3F327842B7C07EDDF73696F4D42DCFD959D5CC8828260
8AF94C1E985E417C4EBC24EED74BE18A943544E25947D4374AC11006B9E5D4DA
C3275214229FA099052DAFEC1A769E5FF26472B1C6ACF37CAF86594F20282F5A
B290313D15C4EA643E5DCACC9851EFCD72F65B1FC41DD6473DAEBE8238B559CF
74D20F6F686F0A2131491D6596B994740B971EB4A08FC05C36AEDB0B9C0842B2
CA308D8A09D58FE92ECDAF37DF298B1DA09B9DB757D506FE957FE0DAE5CBF944
8B87C247947C4C6AFD3CE06BC4717BA13520EA08AC19972E04C9D5B0C0A40994
AB3368D255FFC3103013D17CE324CCB394CAE572EB43FD3E9286858EE1900B46
3C908C9E091F80447AF7E6C293CB8FC5C10297E96A026F3BE6C20B0B75EF07D5
0C7A375B2E4A60676DBB964E032A4533162303E6EFD40DB876FF96419CC28E0D
700FC8D0B86BCB5AE114CD9297D70CBCE2C4ACB8AEEA7C1D53B005782F7CCA2F
F6F8D703C6508CB26B233B9EA4AF1FF88A47821BAF984E4E04B62B3C0B4706C2
F4B937552501F5C6F54CE619BF6E5FC2DB37D0A4BC6BFD49EDD490A6C4A4F6FA
78DD2E97C94FCAC7BDDAE1632698FD04D7F32008DE41897A0D779DF04C4945ED
D04DB289056A52FA04AEC5482AB24DC19A7FA49E4BA65991F7D7A02BFA8DF53C
CFDFC1364BC5D791DDC74B80D72F417137655FC5DDF1DCFC066124ADB7A530FF
482F0D42D4D4E62EE95CF3D266D5DD048DD4F726AA5157577FDCAD80F1DC4FCC
AE4BA88BDA8A5AE2FF8A7726DEEEDF493D2165A58F151CA288979D90CEEBB568
733B2922BD92760AE6013A48E72625F661F997378A923B76F21E4A843009E59E
14AA23CDF430EEC553D130F48184A7E945F995199AAF7F509D2BA769C94634E5
99E4A07D2DB841A3EBF390358E8039428DBCFB392A8FB2DECFE1F3F0944A0E73
FF90166BE02169067C0D55E748AB85B84B0A2EFA64A9B84D7808CE9085BD9692
6154C93B51351F869A3BAE6E006E1E6F2575B2E499AF45928859DFE1EAF6BEE9
9BA85B6D6420D7836FE742785B59089E532A7692FD0759A4F223DEB7076BE764
A7E737B7D4B46CC28F10E72EFDD6CDC7EF7FEB8DAA794003AA5DF73E2276568E
741EFB56BD2FA8AB9891547508117BA9E63D069030546F235AAE02B860A6794D
2296A07D87C8BC64DA7CCE77D05716AC447C6621A920B08C470D538B6123773C
8BC72E95493C76DC3DB6A87F9C31A5C1D3262F3D93C76AF34C65D5567709FD9C
ED3BF47766C797F8DD556E0FD67A5E39D18F59085FFE7807B89A0E1C9D3A8A08
4F76008A3C1EB354A8D8B62CF151B24BE7EAE46E537B40516C16A3340E27DA70
5EBAEFBEC78849999D1350DEFC75AA4E906B3C3FD3D6F9A6BD316C21F2CE0888
A4DF98D789894AA9FE20F7AECE763779F66CCA0E22C95AB8EE0F8B51F7281C0F
882B5EFF2CB573B87DEBAC27155620665441DC4A7819B479D7B24A2219E958CE
C27E8428D10A464B0F5659E5808FBC2EEA3AF4EA85208752536FE51516653B11
C378A6932E61686A9DADFB85D79B7C5FDD61F77F7A643C256317A924391F7B52
DA17480BFC9FB70A79FFF4314F1988F46DAF0AD868D252587DE58D48084F49D2
133778C4B1F3E782590E254A672945A5374ECBBD42261293B062B8BDB7EB4A5B
D4A3B685D82F075D6FCCD4660696230596E4301C609871641736319D60472FE7
B092039D87BECA6090B89EF09D827EBFEC14E16AD7805385B257DD5275562E04
391003DDCFA7A2678EAE8394B7E54823335E63F6E33751F6D469FE248A31CF88
E2643D8E0A2F59F9C676A59CFDB4ECA6DFDBADC1EA404EFAAF8B40F39081D02A
ABD62B4A9623BBCF6AE5B49ECA4E80A7041F6B0298108910FE24F9AE4BF587F2
821FEBA3003B661BEFCCD3B1A9E2DD8E09BABAA0D6DEB60872BE99DFD09EA0E8
1401608E4B598A50B5B58ECF3CCFCBA79CA290424CB64B2F8DC3B2429EA83C62
0295FAB23BED10FF63416E480788A7EA877B21C96D1CC6D2264ECB7B2BA7B201
B49885CCE315BFF59F214AF1E9592A56BFCE4BC6AB5FA906532CBB7AA8102A1D
AA1A9C6153A323BB3F81A02394F3D90D00F695B3C7BF43D94B945DE65979586E
2F71A02FA4F2906AB5687D008752B27231CABC6A417060BB55FB70CD682EA9EB
3E5ECFD9EBB7361AAEC1AA68E4266E6E3F6E40C7F93DB09685402CDB6E2492AD
636B2707090C4F0E801247599A8429D6191E583EF84A682D4E1CC1184AF30AB0
C23B4A09D7512E45C2A2F977F2C78AD4027EF58A5EF844C55F8CFEEA7736C005
034A5146EBCB69FD0B93F5311431B75F90FB26552A853B001C73EC05DC67AF67
232A2371FFBC5D7383596A1ECF55B0E3ABAB4AAB13023B4025AF064112ECB51D
605EA389DA1568A490929F02789BB09CE2F192F1203005F93E67948F8A590C33
E148F0DB93BBEE146D6D9A5EA0A463049B7EF079A521673E98C9BD3C8C02B326
3F2A85690128398205D563D05C1337BC0754FE10CFE9D689DE535D74DC1F3CA6
D6C9894FB67D4186BCE69C203A46AD49BF378A69DAE46BE7B180BFC814CE13DE
BCD5352D06C45B7E04D2F8464643A262D5563A8A704128C1CB7B2137B14C2794
9DCD3E061254859D1413E9411C5E098A8222CF6AACDECDCDB1DBF68D054D0CFC
FE523F4A82923E8970BB5D46F89827DF8ADD6AB616769478DB607F40627A4287
3550E7F0B98C1BDD9D7A64A74DEA0D0D05B215DCE665A59F6D32CDEA08E8E1CA
E0E71DC8CD4E8EE4E8B241B0226D3AA1C789A2F6531E5D843104AA65BD35087D
6FD299F59377A0A5A47F76A85B7BCF611B8BB03AEDF63BCDCEA18DF2C9C6F414
C7FBA64546B82F5E4A681B61C85FB2ACCB06AC3261EB8ECED56CA16B5A33D54E
E55FC6CE52D275A0376B5927124A0E27368575AB79B9C6690E6B70E37A26366D
A969F51608B0E6AD068D94A68A30FCEFB23C26BBC5D8178E0C648E7401671825
7B5202DA5BBE40B8D37E3CB1D5F4BCC45CCC9700BBD8B38EFFD67254A2A3DF4F
D2971706958C52FAC527F2C46221E2CA5C7910D57C9D26EF375AE5A106979378
DA6C56698C566E4957E890334A740D99574916DAD8C43B84EA8C3EE368D839AA
36F966A9F5010E320D9B355BFA072F3DB21A04336D2F7E12DB6DEFDAC40FD092
1A71D139B533054C95D60595181CCB730BB894244F83472DFEDB85C49B3CD11C
CDE5CF4D79A15481E01736A1D9C6A3BE38CCE07BA6A646161EF2E7D4AD9A83CE
39C3F7B3037C3844C932803CD0EA48F812860203840A71AFE2E0BF926C045184
AD627AC3BBA02BCD8611EFF6462D6BCCF7A383B0ED6B4CA47E885E539A37176F
FBCBE1C6CBE62560AC7383C57C445DC477FC099E9E2F1CC8155314607DA1A3AA
B18F7FF7AF276F26C23C0ECBF55027F50D8766754F80D4B64325A3ECC88B8B8B
06FF728D06635FABC1E51A25531CAF3DF19926B5386CFFDD1281ACD2C3F07171
C7A505C7A1E9ABB92B5BD9D4F72F701E6A79521AA8D2B66461A1B4144889016B
528128D23AFD0D0558E8DE8B9696DC40E056CD7080B83AA0C9EF60FE387F0596
AC27D6D25620CB60C548661C9CD72A52B039AC87F06889904431D8AEBDB01877
16517728ADEB1C18A11564AEF721AE0BCFE441CAE9C5369F941A4BC1BB714897
F2D1402CD32629224B5AB934BA190E2CD8A3789299661C73714D2B919FDBB35C
799A09719CEEFAD1331CEEDE81E652B0347C314E6129BE2ED102C6B8115659C0
A7B3F761AA095CFED1130DE798F9AB7BA25840BAE0927909150F4CD8D1CDE316
E579028F3EFDA83A108EF9BFB36D4C37C5B9E3BE1E57DE92E8A080B5371B45E3
D53E24985B99A407896BC307245FE920F1B49ACCE084196BEC1D72AF4AA8B3B8
305B50FEA1F02F28CDA6DB403BE7D07CB079D484C4BA90F97BDFE490C44DD8AF
599B216D7872848649B117F9E531EC63D8625CA4B1DBD62D8A15EC363DAEC92D
62610365C7D1A4ACB60A4C8FC91E2C41FEBE22563EECAEEFBC00FB55E884AC79
B44F12F041B9A4C1154CFFCDDB49EF406110EF60E654C750A6BBB560D6F16D58
98CEE4DA781D525BAA3D8621A30C5B88F750FD9130CD5130BF39FE8EBF5F027A
229F958275424BB9372A73B26A367E7A9F7D7016C61F595AF117F9B54A535E6A
A3B9449AE5B5AE57EC8BF2CC08F5486DC15C14E41A294E85AFD4942DDDDB410B
C0BD2D7A6C1BCBE9D70E145AF5A135E8521EB32306941394B71098D848D25F19
EE0870BA144077D7D6F9D72138BF1F2127C118FBC5F76E9BA57BDE8BC58BC488
9121A0143B71083D380A803D4764F09F69CF27FAEABA73C5201F7127E8A0A0AF
0E3D3EF818107C12EADB3E33D50C10A813A4424E00738F4D30FE6EC0342C4EB3
88CF094248EEEB33C56768CB9C7CB62E8705ED11C167DEC70ACD3A12FBB8C7F5
4992C4B1850EADD5977DBE7EF7D6BC7DFED10025EAB82FE8DFE8F7C6C77046C6
354355EB47E772A13BFA1BAB3069457F430D79C004209A135FF14705670EEADD
BBC15396AA38416514DD6AB6EF04EBF823F0CB12B9B888350F061AC59A40DFE5
166AA1476FB2F2EE0706A95636430802447E39B23DD6C393C0E07D36A04DB481
270E773FAD203502C856100F8029FE423B1764AC41626C55A5D84D8402FBBB96
4460EE1240D10F57263DAFCDD85B8CAE13074297143FEA622315FD272EE00B6C
06F4453FB8DB45A268A1E23A06F723510EE274715D33D35F348F23F7EA1EB5B4
A31E297851B00C5FF06EF6E604CEA46222B5CA120B7B9FC8FB95D27536CFD072
97B401359D58AB3CD0EAF5FE37B14414084D04E274CF3F3321205580C40672F7
7023C12261F48095C61914D78E0C0EB91B137E6B7962693BACB8A5F32B33DBBD
086A67C2D2A7CA56BB4A055C15B52D223A44278D81CD3CAB35273F74C149A8BD
E913B58547D88A9EE631DDF382D8FCF9678228F3F76018DC87ECB83C01C700CD
B47DB02AA8107F652D7D784ADB89EC9AC403C7FF7D467D87E0DB48853C453B33
C97CC3647A9B3D1D3F2B7A79C10CF43E15F745B590923EE173F9ABFB0924487B
2E8ADA17513739892E32186BF64E85A0C678FB966E3F9C9C94CD809D849B0158
D7D0AA596EF03BA24D168A0C691ECFA1E2039D14A779773ED58A314D9C3CAD52
6D5FBACAD0CF89AA47BA3E16451575BF76B742AFC3A23E15AF5F5715C7741B4A
39892BA54DE746AC430BD11AD8D3F63E7DD135E069869DE676F85F6F63AC4C90
0524A1C9A0C162564BC484340748EA61426119CE0D0D1E87DC4642F5C96F9A3F
8C9123FAD7A341D07485AB1D3BD80E0D9579AE12B5A2D461EC155279F486B20F
E5071B31283EF9DD5EB44D7FE305F8BC6EB3005E774E589EC49BC10BBFBDCF13
4E1D7C09E4C9F3937A566F9C00C98E483517913EE5796C6CAA63817245AAB062
B71C1F8132EBDF7AC035F0A8B082FEDEAB8DE42E51EA6194A6B60F60E81EC007
AF3AF9AC3E159CCE41F61B76F55F3ABD8A94C009A615C4260B9E2C17F7F0C583
F4DB348419E559A68047ACD0F86DDAA207F804ADE4B65F01C7EEFF1FB9D0F39B
D6326B535B8F48A4780CC6251FAECB30B81800ADDA73D6AE3C293BE6080AD388
A9C5989D385A128C524A80CAAB058A20B1AF7BF53B98D2BC2495594486211F01
1C155B6DE806AEC61765740F5C31BDC000DC0AD86795310AB5CF3C2E2A37C8CB
6154DB095F6EF8372C0DEC7B84C24B1EB75902D65726684D0196FE565E7139A3
7B689177D1FF063B8B91F93CA9D85259F7E5E31ACDF7BA62165191F9E401FA33
8BDC04E713B5CE21DAE287AFBE7A3BB46696802E761151D79277EC6FA15B225A
AFEEF7AD30C759D19583DE3375ABD84AE1F8A5A477015BF58B7FA27C8B4AD9C6
BCC4086E9DD0EBB840ABF10298F028730E7BB50AB7B771722BE503CA117CB518
FC7DA7139B1FE3C593A0D64B149750EB920BCA35CF19C012F5502BF2CD970723
45853F5D1F4C9BD0F5F852706B8831CC2CE93AE6DE420E841101810C1B91C13B
D4C1AB41CCFC3A1330C70AF81592FD977F03C176B89B8494A709CDF209EBDF27
DA897E9ED13D3CEFEE6BCE940A87005FBD8F807BCDA487DDAE55231E69EFDD08
66EFB8B6F166329ED7B7C78FF990ED9B7BCFCE6C2A6EA5B534D10616F0A3B4E6
306778E1181DBAD890651E06A203511F4C6B68E32EF90612E019028C867ABCC8
4DED1F9C07053F6961E7DF3115CE84AD9256363892CC3A3DBD537FDE9953E061
F1ACA96FC04C946CC21ADFEB9E595E0FF117345459B79DD1A25C162EF0B4A93A
4F88B39DB6D59AFCFC937C58FC549027B887A35CD1347BEFF7CAA15EFFD5FB55
9E73138A26C65C968CC719FBBB7FC57DC27369E59AAD758FED42B64E5497EFA9
BC75CD6B0A352E266D07E744934DF089FBF8ED5A3E179B79B9D509B142CD8379
7F936C6F0C5C2EE33FB55D830B75C3C9E8E11F7F5BB917910A7BEB8AAEE0A259
094F8D2FE8006671EDB799FAA8D6E2ABE45242841DCCA8DD931A25804CD69246
6CE729F732D9467B433F5489418C1E02DE5E05AD345DFAFFC1E5A7963E121884
1F8358A41A0A1DDB14262263EA3C70A83068D5B484FA218893FC3A69FD4C2ADE
56572D455A4DA5CFACE59EDA94D3171939A217DE9F242701778516B5B67C6DC1
FB0859B805856D3A84615F93C204ADFC8423EC0A3EE9214D4E219EB73F8E2B6A
C44612F483842FBAE354CDF7C4E5FE75FF3A0571929C2BAE3C1FC5252AF150EE
7BC0924735B3961B782130C9FB4B3558796F8BE7E6CB27D0EF9B95F9839C394D
93E3905CEDFB9AED7DE937CCD9659D791ADB25C3F98545F287A7BAF1E566D6B8
2CFF7BCC050F7B2C47F4AC2BE7061ED7119CC786A480511DF9E099D4A539E700
795577E57AD1FDE96CBC57ABDD59C5F5A07CA23F530A6872AFD973DE4B0B6B33
8FDCE5E65FBA38D9FC7AEC035F60A517170D654076050CFF718C2FF68B102218
84D4EDD847E38EFDE1E7EC967F7ED77411A39F230423320D32484EC958BC4D99
FC04EBF91C6B17B3187495701D16C59CFA4632A5844690E02265DDF74198BEBC
73C0E5346A10D86E2BB484E752FD816F36DDCCDE41B9B21E140BC9AA3D2CB732
43553B51FF8BD093B2F8894413119754DAEB4C88C65174F7C1E66F5BCBAA4499
CAFF1F07311E1B98439F24DF14D87C56F7CDB351B0BAAE8E4D4E939D8008ECD6
D9FB9C213829927CB006349343D4796BD56D982CFDC5679FC2125934D51332C3
2CEDB3577C6F441EB83C4DFB3A569639BFB4725F19AC7AB0BBD5F5A1719677E4
5515E0A45FA810EF424FD7F304615925ACBC89CA256E79EC5E06F75335FAFC6F
C7237C06EA89FE8C793CEF99C664E66995E938481070CB5ABB37D11D55F3415E
7870EBAA8F1628B4B10B2686E0481089A5404DF4D54DE7A5E20ACC9413D85384
7B32CDEBF7E5EC212566A8597B0C1FF95C7C23A186190EA91D54B93E9BBDDF4A
6959069DED6BCC5462BA246C91B8702261C4BDAC5811E77CA6539CF75261BB6F
320CED41A430A3ECE7EDCD67EEAA4A47572EBDFB3B506175F85FE1B570559AD4
C0AE4D8B48A2D4879D14EEFF66F7C70F3349B18080606CECEA735EB56526CA74
C63A1820D720564852A4D87C7981D6390D18FE77C4BB74FA978C345E148086FE
09D708D1BC2DC0F6B7FBF662EB3CD5F3E9E085E224ACA48669FC947880E89633
CB9B01F941DC4683178495DE52B3B5F266AD3690FA6D96B12FE6FD6F90A6C4DA
D6D6C8EE991DA6B29DADCAFDB0ACEA309311365753734207994576A7B889AB27
2A313D3350E1013B1918AD7AA8CBB18930E854154EBC955ACA3161E49EDEB070
BD5467708357D0C5988E79897AB9B62B1ED8CBE200B890E5CA725689BECC8A61
627B0E4CCBF00709529BAB8B7EB60F728653C76BB3006BF3F2DEF34CCD72E0E3
153B31F506B1619267581663B023BC4C502C26DC983968CA045530B40249F546
E2A2E32EDF40A4D83F5405FEABE89ADE1FB7753C81862CBC91564F197F8ACC5D
40C633412B5A3E25A63A909664969D418D74499683FB4AC4C301866619AE552F
E215899E9DCB0F360B92F0C6223B73A00F8F78AC55D427B08365CB049D85BD60
D6F60972D73DED96AAA5041C94008CA298493FF6381006F2FF25444707273FFF
4789A96DC8457C325573EF3064790F80738FE5E65F8CF570623B363EF905B117
CC45D973AF15115EF67A3F9D65316759265ECED1DE6C1A245CA4FE8669C30317
5D288DA1003B765FD0DC880C9081BE6DFC0AA5CD19FBFEA62FBEE90EDF5509C9
20A330F0CDF945513CEEE4B6B7A2BC4A39AC3E9FF5B7531AA149B2035489AD83
937136BCB00EC965A5B0AB62215618E8369FBC041AE39217152DDC831E4CE477
E5C0DC3A135811B9E5E8C789823A8A4B45F91ECF4567EA62D2FEDC9D2135B9B7
FAADA47001F1F892DA7CA82B016A36CCAF7C23CE3795DA0936B31A73FBDC0F93
8AFA382B0D0ACDAFC806062D453FADC3064431CBE7B4B8AAC5A536C0F98FA339
7C42837A11ADFC8ADB65256EA9F912F736419509375CCC839EEACCE97C180EB6
1523B8C38B1E7F22CDB0D174436E400363FB537DB077D1F78DB3DCF06A01F110
C9EA71B78C0F95FC84E421F3841B30BF2CB2912A215E5A81EFBD63DC459B029B
E691E30C5B4849C0FC2BAF7D78949352153E016E47C831B20D35388E59B08BB4
382C24BB7279667ECD32260B350FC3DD3E742AB6D3855FC2F7112883AD988188
0318EFF6799438730BEA36FE2DFEE585786CC9D6792BEC9CFD89831F6402C8F3
F47745C98DDB60EEF30C33373B5A73D22CEF43C189E0373BEC278CBB7CFE0729
7CA2B21D79BDE1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 19 /acute put
dup 73 /I put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB702F41DE3A333954BE2B4C573C4FD81E89CC923D8427AF840C0D45E
8C6045871AF6D7D534484DBEFDD94BFF649AA9188B28B3D90D954466C7032C6F
D37C432465D39FF6AC0E27ECE4FDC877E425C5BBDA375D75E61743B98A82F28A
E551EDD233790A802C6D2BB0AFB4E67C4719BA404B5A504D813F5EC53DEC09DF
12BF4434ED029199C99B71690448F24C949870ED0458056A84C97BDC1D3578BF
4E98BBB8228183A015C8E8D0359890567A1694E2325D920723B1480291E65E67
16CAFBF15B8EBFF22443647E16DBE73CB1904C9AF93EDA20B1AB926C6F06D1AA
45A59046669671CFEE5414275ED42A03C4ACDEE1585E778C7AF747DE45107801
BDD7AFC4D8E79CDBED137436DA476AD9B4BD97AD1A2E38018252707FCD43DD40
21744121D39B29EA9053C5F3EFB0EACCC4A35C5B2A0B7D01E2C18EEDDF405F0C
1943216F5E371EBB122D515D08F52E8473546841B7D09321366D17B05C4A23BE
E8E757176291F0033AF4305C1D90A53CCF3847B419A1D995A4CF9F7E0B2B67B0
C8AD9428C36FAE4D47EB054181FAB7B69C83C1C69E2B0E7B6B9C1B686F1CF257
E89048C45F44A2804B077AB98875B697B43C1B03B8ECD315F70BCDBB516D4076
D3594A6F63FBA2F19B8FD7B903096BE41FE672564763C663031A04DDA08B09F5
78F43C5ECA266AAD3BBBF9888642412411E1FF1B0B7CFECC97F03AB64F1011CF
C4D67369C2B130D76693C8E5802D89F154E7B0FC3C92422984BF11460A91A263
7BAA3A2E4651A6329E7C64D8E24DC119194807A06FEFFC7F0894E09E7281E8B0
808A62C4EDAB8000E16689CFE438831468F4EC695BDD6CC1621503A607D7D49E
F21EF454A6B4B15D2B92308BA5EC66A18150C2031196905DD47C08E3629B9D36
E69BA6F2015707D4A0A7AA61C1D1DA69D394A078C144DF618D857EC4966ED92C
568D5BE0BEC4B85964255F7346DC3629DBAA7E4CAB8F9142B0820CF312A83444
F16E61A3B240530C36A778690F39267DA62C80B8649F422DC61CF6E5A2F4C810
0944B7B652C2A7AF104E8EC227F44507C8DABAFB84CDE68A5B62058EACE71B68
F23AA15B4F66322672C1C7D111F375A91A841FBC736D415D89B90144755F6ECC
7AEA72D15AF073A911CC52E1AFEC827EC5884399B37598BBE52ABF0865B6DC4B
AB5777CFA202F876BEC980C0E52BC5912F9C5939C6EA76F493D044AA71F8CC51
68B7AFF72B2E28379B71007C2D40C86CB92EE21E376DF4CFF0288B92CA17773F
1D0DF21123D50385F423D19CE49D15B205035B771F601EBC731A32B85634AE5F
2EC20EBB8D2935BA31D90C816F527BA77DEB961AA9AF7760A3E2B7EA85AD85E6
2A5BB25686D9597DF33B9AA0E8D4FDFD5EB9E4B701F7639A4FDB298C2175DDBF
D2FEA3F31A583CD1F781E9E1843776B0EB0FAF87E4EB4B15E0D26B768522AA1D
9A9A849CE6AC27EF82299BEA58ED4332B81B3353A1C8DAE1D6D1898F30730923
7719C23C617CF8B1A2531CEE54911C58CFBC61034738ABE970040CC0C2A5A5BA
402ED8DEDD13CD082C9B9A6C7AF788833AAB46451B2B8A41BBB2C93781C27EDD
FF20776AE05B0E37C7DCEABB6532DA8432D2D25B6775A0156F012B96F632D565
CD328F719DBC529104C17B26ADF89E1EB00D26B7434080AAA3E7CCAA87EDAD81
438AB270BA472881775200F7AFA145CDA3711BAF2157266708EE5E211C084FA4
1C81B032B9799305B6D4935D2C3DCFD1ECA4429F07C7F94019D0515A4E752ABB
88EB65EB087DE720E79CBA3C85E2D23618DC832D810467D11E945D02BD0D9C8B
38B60499FAA3E22D11C27ACDB085102E98333E4D93BB2B205747C90861F4E21B
D68A3DD63FC21444DDFFC87DD1C3938924F91F05CB9FD9C78CA759ED80DDDB5A
2789632EBED7ACE7922ADE70232F4D49632ED6190359D1F2D677786F72F4DD44
910B3D8313DA907C820369D2DD7526720B26B76E6F52B825A0F0E5CA03D677AE
BFD275CDDABFE874815C485A2D94C545FF0976C698360E75903B5A55BCDDC170
8C25BBE7AA36F70CA35C4D718BEF5CEE6601B2DE36477985068904DD850B02E7
EC3D0010D96E79221CB1CAC451E1FBE54C808749C19240AD4C8F1DDF218624F3
8D5448286D4039BC7AEBB5CB2BE8B30CE5AC7A6832F2C150AE45C5142573B92E
87076A670E8A7E1D922C55B4B7B5B03ECAC41F1A4B7E579971CBD3AA2D43100B
70E26D2C78FA1ACE13BA54A68308061518701F026E1FC2AECBEDC4CC18CDB81F
75417631AF738530638972A762F9A946DB7CA9148E8400A677FB1EC0DF3B500C
35473A6140FF061756CBF33D7CC693DA19B2378134CE6DD83ED68D01BC26ECD4
CA9F20693B63F6B79D5C1D649C904A0DCC610F842E4E95647CF47F83DB9E717E
D7DB767DE2E1DE9C51F839547C5FD91B9B8AB16DDE240D280D689F8D5D6E1614
0C28EC1805B107E4479D08DDD7362BC22AAD5D2DA278F8BBED323BB51E012BB3
98544BD0ACAE08F6B09DC0F7121C8F88DF0700197A1CCE162FC100651E534933
A0B0BD2512ADAAA0F96529D3536AE8D536D7A46FB22C77100F84CF803553C0C8
6C57169C6A2ECDFE919299665ABB467BDE482FB5B58E2A281D27854B31C05B09
CA96DB0E9333E06BC12EC944CE0F7FC31361FAEF1F08A36E0FB0A163E06BD85D
22FA2650BD9761EED3BEADA96C46F21785E2F07F7115C1017264DB68643976E5
0989C3E4E1D736596A8B096565BFE9F27966B442932F499202FEAD6246E87B23
EBC3734F53F86E88A3399FBEA2AF475F23C6464D5DBF3185D763094533CD4362
330C971D36C8E527832D7E00695FB2955F577CF0EAAAC1FA6E3DC8DE9BA366B0
0F4212C9E9A861C04B6CE898FC23F52CCEAF524949DBDBAA6FB4FF489D7D1074
097404EDE6A5D07EFBD88A64F143115760B1E8DEB746FA880CF106966FA3760C
D0D9A02116E5C0B4B3F511416E4E87EC4367127C85862470801DEAB551084FA9
2E225C8968C3DB12AFDAC93155BDEF47263C14FF24C266C6632967F8D32993DE
FDA4E51DC2CF852215F952055908AAFF7C1EFA1DD4D9D95F7C4BC5BC376DD066
D53A3DE322AE3C12648BDA84A1C760501C00638EC4F0C039B6241D2BEFC7F4FB
2BA0E1ABD4FF77677FEA0444A2271B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 55 /seven put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6A42FA7AF1CD28488C1FA0A2D5D57551A68A6479A8FFA785C2BD2D32
BB5F20CFCD667AB094E382D582BEAD23DF0A82CC481E2DF2F7B0CE752DB13736
3373816937321F70D50D6D61F24053B2D53F0D9433CD9F0A33FE83C973E627DD
0CCC64457AF3C439E130540FBCBC2D0CB410A2986BD4A7B118FC52BD298B1DE6
26D7348E9A27E721E0DB58AE8034A64BE77A35CA8567EE7B87B270052843D6B4
46C3B8817FF88202F88F36C41EE1C42B5BE29501464273B91877B0B41FF16551
12063F7BD3D2F8319D5B532BF9F91C7EBE72EAA2A9EA3245230A081109CF9475
27D857FD477BA50486F6864CB7AB263AD039499A69B75DCB34FEC581E5FD8846
A45307AC3C6AC57C3BD70F801D02ED63B52CA0B86222F2B90F91C155F3BA4882
A18B6602235F026F9D4CE871E5CC7EB30E3934FD5F89F09B25F78633F8D269EB
8BF7FB2277C79FCC46C02DD6D3D48852ED4B78CE7B4EF40AE1A59A8AF0D0869F
F15ABAD0083FF4BC53CB4E6A826FAB2C8FF558D0EDD67F350C9C4105F867E2AA
3F10C3D701CCDF4FC55650DD5BDD8F860E60CDD9B72B0340F5AC99D01BAE3BB5
6977F0E8D21158CD18F6523CF7B633C9C673B6BB38C9AF59940CAB5680A26E06
1D2F60945DA412E79C08908A0030F94AEB435C0C0C42BB0FFC8391B01E61A2DD
28EDA14B5FF1EDCABA25574158A8F96EBEF1CEA0B66A6581C8638D5F4D4A1CE3
33DEF3FFBF332D5EB49BE21977146C8872ECAD4D82A933AA06E02B7BBC187579
8E9B78BD7DC4E6C0A09369D0CD4303B562DFEE4836C38AB1F2B58D683AEB9150
5FAA881B92AC5D74D10EB5BBDEAA240D78E39521E10289FC5030632D452BC8A2
3D12AA1A295EF5F50B62E4E016350C351418EB5A898BA95D5857F0E6D8CA3BFA
4362223B86632842682BCD4EED2766A69EF6B97655AFEA2A3EF7E4B3FFC5A421
EEFE780A9E6A96422158665B4B3C55CB96C5D792E2DDFD91D5D62FEA685E885E
2CB6BD15030D7B40622753C9A7F0B1C126314700F680DC8BCB33A871F20ABC9D
D9856F0F017B31F3FEC56AE007B1E80EB405BA27F77FD35747A755A5367DBCCE
D766B61470DA712B94739617CE26737D36FF317B49A63A694C8F8DC44FBA5607
435A619684F502CF65FD9BBF3F5B187D8321A0A21D2271C7FAD646EC17D7AACB
C8F73EF95252B3DACC2D945D9BECD2CAD3CBB95E360FB2082919A9779B722CE2
A13645590B07522772510FFE82B8EAD68AC5D758A83EBC262F521F3B299C2CDD
79081EDE6A3F161891F0FEF72187BD2B697EAE7593248EAD1C7ADD5928EA3DEC
C5CF8BC70CB8C0D4B64A6799C8449E97E13CA0AAAB196E8E86602B55A6E23373
FB2B49D5149EC2ADBFC09A939BE8C0AA7A06552BC2520092DFFA19F1A79AC9BD
D4AF5E6D826E97FC91A0A25F4CAD39097B0692F5DFDA6F6F8FB90392E509F625
818D960C6F4A30587F20E970B87059684FE70A0DEC17223DD77C51E2F382542F
B5873957605AA560B19CB5D3F27D47E842200BDCE3573F67A5166236F36EE2D6
8FC633A899A921585BDB59335F2E1F31A19C1C8ED262075A6D231350953FACEC
FD82FBD821919E3542B33690DB080BB80EA0AEE1C117EA3E79D5ECB5C4F6FC22
7AA3393F00293C6D532D772D95F5FD6E78A4DDAFA5639C802B5670F907AA475A
156096793EF05014E19CC5349F494200A88F5A51D0859BF027A10FCB3A40FE5A
1369F314F4E761FC7F1E999E43B6A83BC488F512F8067175476917012FBF0067
F1E8DC707AD40BD7C35EBF67E940285E59CE23C24070A8B22368C1E7E18A49F1
CC11FEF87CF6FF8128758C8582E6CA971AB86E9DEF7DCC79E6B2C29FA5CDFB04
E017597D1E99EDB4DEB54BB7EA254336626BFAC37FCFFB8C5F5C94175DFB9E11
A2CFC81D73E126025FB7B374414B89BB4EA40197633BC4639187E530752DFB14
5AA8902B8D6165AA8E1F93DA14560C1643CD7A872614B594D146287153A40514
791435C7A68AA72F30E32808E321283534F91CFE4A015CD40CE908BE2CE1A3BF
18AAC41C860B70833B92CB7228AB2C8F68D03B6FF09711F44C1487A8A062B0E7
D307423CF2852AD05D7A6A7397A871DD11FA1D78E5F78DF4E9B0FAFA7187F04F
0DB421FCF47ED1D902DF8031E5B94AD53A9073388F168406CA087A021FF5FC22
878EB9A10C5C64591E6A43693267083317A31E9ED29AA530293673A84014C721
44E350AC33A447B9A8EE0450E4C446AB056E1ACAEC045451980CD9EC7CAAB72B
FB900699E6CA7B672D208B1FD63B002408D3CAFE48B040D71A55004B6570C850
B55F5AB7C609BCB19562BD225A48FBB4FF1F698369322B6309C8D86ED69EB52B
C90411BD034E11E6B81735AB30E6546BF017388F17FB9C8895B45810CC9530C5
FA0AE3B3111E21A873A404ACBBE4BE9906577760274BB4A25F54A1EEB1D2AE27
1493A54F1E0AC690F982706CE4046E87C5E0DB0EA21F52AD55C721156D44A38F
3CF6D86887FD5BD2B7C2B3410FC180779C0E602AC6431BC28AB6D937912C8751
545F1034CA82D938CA698CBF87DAE716173C3E69F47405B2F24209889A98A0FA
33D9C337F0D03AC1AD45D28C6CDBDA70174FD46DA36BEAC07DF24404E050CDB6
C3DC6ADC7DB84DEB6DA73092F21F04F718009DBA58BF4E3DF678DAE5837FF6A4
2C21893F4FA98854D55FC99E457B53759A53B327A58590CF7C5C68F35EBD3814
422ACB1347610D835EFECA02E3020C4114F3764154D81C90DD81F452E37AA547
862476E5E4F6D25203B7290FABFE774394EF9D879BB2E5DF8E78230A3C8427EA
5FB494CD1A9F10D27551FEC96EB5B0DE60AFF31590E24314BD5E11B11C2C3294
890D18327E964D0D80DFFCDB0D73A10EF82C1678D10320F0211DAC3D42C54C65
67FF9696C838A0CA93349861604162FCBDE632F009AF8CAC686052C41F36D047
73A927CDED496E0FCD1DE2953DB65EB338447C5D733BA202827269C32883F554
4184399F9F4FDF25EED70B7C0C28883B5A74E400721025C5BA4AB8B21E376A46
E0668ADA3D482827D2C55C08A6C92B7EB7288759277A8ABB11261923CB8DD3E4
A20CE7A226A8157B8977E52126C58776B452C4BAF9B3D607510CD89E24569931
8460EBE84964D35092EA42C6187A090A8EDFA903A4260C8F851307C6204A77DF
9A2CA27EA3806254BC6FC23D38F6EE3D91C062EF39E830086DC2BDBE1C672A18
329B091487208642F25500313524003AB4FE3550C5A003F7A24DE31D042005AD
9567FB3675D0698950D99155A4E6C30F77E5CA1EC2B6A1D7249F9E6147BD2FE7
BFC40690C14F75FD08CCE0965ED1E1F9B53E869954CD59EF4512BD13E0260FB4
045602F770FB46871E8AC16DEC03FA9F103E6B7CE4A829E51761FA1CF159D9EF
E965DA1D0FA7223E5D0744DDE20EA0C9C25B1C8127A8E12B7AA0EC513A719524
D3F3361960D1FBF5936F0669D55E59F7C97556A0CC007643C59B9D449171468F
64BEF1AA065EDF920507600F0B121FD04D4A3ED57E5D1BE2D628CCE535884BC7
051CC8944F890842DC3A9E96FD7B0BADF48378156AE1B6E672D22F1290914981
5DAF0DAD8B0F14744A77E161586FBC91D5CE484BAE0C31F3CC6353D528705C9C
D7CB2F3827965E1C19416076BD45918E56A2B2188D264841822FB241FA946EE0
9E72ED5D7B17DEAC742E12DAE5661DB6F019C342C0C9076CC3F11D1B100294CB
8D55353701DB414A6D2BB3E93527945453C8143B29017F92D9B9AE0E81848EE8
E25CA947A2D7D1A3E4E838268A1BBF8F306CE4D9F8C4FCBCE04F3C65EA595949
447A77BFE5B7A0D1878096CEFD77A470FEBA9DCDAE0CDBAF63408E51059141C9
12445290FAB572DA84C905783E2F84D4A945D8C5F9FC80634B3E7F687FC46845
F06137FEFD65BB3DEACC9E232F01C5C7C3B42E33AC0354AE100B63DDA4ACDBE3
8243CD580D40D41BCBA519901BEC45CA2D08C878E6AD5C7691B72AD442BD769E
DD7D9909F6FC2DB9257DD2EFECD605C52C30B30C9E6152A08A96B1F652A9A6D5
35DF53C7DDFCE8F292B64B63387EC6E301B7583FE5B4FCC56EBA7650752AD702
73023AA31E8825FFC6FB09910D0B88B6276FB4E8B99A45DE6481EA242E38DB9D
1749C50426D1F1D8DD65AF82A44CC084D66EDBA8ED166D27384986E24D5EF3AE
C9A2B04030A494DBF366A2950235197C61D9558D54219531226E77754F2C22CD
72AC659E7D1BBE20E57247E3E11A272ECB6430C4D0C6B89FCD328AABDBFB88BE
6853C49D73BED78E431A9C7130B290B48787D2F1E54FFC289A69C00B5F281890
21D2122F617C9EF1EAA8035E3531D898658C67ED2526F8483807611E4CE9192E
11CE9531D10EFA2B3F434259E51CA370A79AE74198E9F7CDC810FD98DB1C983F
F233551BFDD1164CA0BC3C1CF01629F6001BD0D721F7363FA89D8A442551FD71
8DB4CFA1B8583948DBC90C10216605F4F4CAC23CD8255C1D0688A63C03B9D3D8
03D8D38D950DBE0E9586D49EE4316A32CF18C6E59CEB940FD68412C346A819B2
B918353F67DB4A5235216C2E2F5288F7EECB6835C5892489E527136E88287647
677105EA2189BA0850D39360DC793D9C810D00F39ED75CE082A7F1E32C7C4AAF
6E49E4904576E5925194D11E6926FE4AB65F5957BD0DF9951B4BC077C3642009
A83A902A02BAAB090E28DB9EEF590FF9F75B387DA1A6C942FE7462C5EF0ECB6E
E9F23643E02A796292FC0DD5758AD48168CD0A9EBFCBA5A1ECC7BA89DDBD7783
C11A4EF8C725DBAF0D073FDE987F8482B96004A943946A59B66C9E3D6FC2DE00
0020696B60A74EB5BC0C0179CCEE61A0C8F2060602A3C9B5539565D9E4B41BEB
E2818835A18CCB49D5FBD48143108B63474D3C14CCB0E07700CB07FCEDDC8A72
BD89E5733F077C0E3E5DA16EBA3573CDD3E6EC2B7C882325B6A9231EE5D4D76D
4DC5D42021FCBC79C0202C0AE81AB065B6CBEC3D2744F9CEFEE33BE7915BEB13
C1681A2E21AF55827DD6E1B1D096A3A9222A0396F2CDEE52A4C2DD076A18CB7A
B78A7481FCD1588681F8A25868BC86C102C38EF332699F4D1EFE7BFF7A81AD07
6D9D499A02C64B4B40C656081F5B8F3636CC40E46975A307684C9C9DF7748EB9
25D610C353A6CB167A1FA1DB68F82D7A2FB92167FB8C8332A4E5386BEFE1DA3D
8A6EC3A8776928830EE4EC0127EEC8B1F77BEFFCF08F523E8534C4338AACC90C
401FC8C55128BB10B0B5E7859D45ADE2794B6542BEECAD6F4AF7B2B4C2E67FA5
5319D86A5C9D54BA0F486D0AD30AB236889CE3491F96BF0E592ACC66A26AD304
448FDCF4BF30979C58C76B902150E12109794534966AAEA519D7C8D016E996AD
517787BF9FBED714C834E973926D95DAD24FB68C243FDC59CE669D97E4583452
E52C40515AEFE6431A6F5AE6A7DA649DB472C774FC92E4999DF5D3871AAB49D6
FF576A1A071909381500FC59A5EE77E1F456363F56D20CFF7807E70D034EB3CF
6A0C138E7EC058EDB9D3041B042A6F4F855456592CE521194E1F24064A8C75A6
1155CD825372CADBD0C7945439ECF7B6EFD1402A1EB5155F0FDBF26069D56F65
79693CB6FCF578515BDE011C6FC23EE68E04374AE352AE4E6CF417C80DE92DF0
2767A1C64A2C5EBF94E09156F46EF632ACF0ECFBFF03EC72BBED1A7F322C4721
910CE2AB2229926AF505232A176C0AC502DA03FC71CD747518FC8B5D23849E63
927398C16E80EC9C1EACF824F805AAAD0CABB754B78561C8B65CB5C36FB26DA1
3E2005F13F3C627C03C3D911547346FD3058F6B6700C66CF00885E8E99B6A625
861D2D21E421DA1C1882C5171091ADB39352ED7B797957D54606C068CCF6CDAD
234287818DE09E9F46207F475243DF80F04C6CB4E227173467927D152C66DA5F
1E7D5434D5BF327184F749C59958B1E035E351DB78379BA463A6DEABADE7C27F
EC3A2A09BC5538A678BC7188A61F9F96FF7172FAA2E85BC49CA0A8F380CC7F44
30D12976A932B73EA068C1BDF5BEE6DCB537E33911EE15B2FEA149EC9AB428F1
59B8400C8105181B21DCF4BB66F2663DE1C6690F66EE452BF490BC133939CCFF
1F0584D4209C3A037B5EB6E1C345BFB7A62A773ED82D4E03A14F8C40514CFBD0
4E09137C53B72E7E26DC120296073F06DEDCD59A59EAA38E2F37E1E348DE386A
550BBAC9E062FD12EA46DA9EF903576C10A99075D332E03CD3B1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 80 /P put
dup 99 /c put
dup 100 /d put
dup 105 /i put
dup 106 /j put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F98037D4962EFAC0FA86B14F3C046A1F7085E40E99C0F2841
8B2C299411F9DC8FA0C8C7E5D7822A10D31D881F6C47B6C47CFA943FF9A9F5E8
D5F1C3E6CCFA324059B942FBA2C6D0E9A3D080DA0CD80D8DF76B0FB6BB706F45
C84054E62F75294ED126A95DBB4FA2D09EF80D1F2C507DF980D3DD2BFA3DBF49
6A99DCC954BE39E51507B12ECDD92C397E82B1E979FBFCE731CDDAE1D9147448
8C312DF818A0E08266A2B60C9C0902AE64276F7A1C6D7BB2EDCCB2E3B7659B13
AEA47A527FB302716624B48AB754218E2E3D99115C606CBC90B5EF73B9F99439
6184472986249C8D8E52A404FE76E17FF814D5BDCA95AC580B44DAE8C593939C
9E7C0ED996B9D2B8118F71BC2F0EBBEA6D7E18FC7CCDC78BF05A034BE39DF9EE
C6BDAE8886C7058B15DABA55E85757137873AE811F25AC7EE3A0CCB8649F6095
7249EDD95E20DF06719DE1E109E5BEFC2A4098E77020110C37A90B5BDBF09654
0F72A7AA528BB009E0FC966D03BF5EC2AB2F109FB09BABE1DE6A9F210B590563
EA94F930201F1676F3D23805CB9620828E3A3B42E9FC4459744013528BFB0E0C
F46A06EA698545C376603E34B998965C47F537F260EB79FA98C230E7ED5D4E50
9039E8A40DA24A30CB183C5CDCF006E69D4F02BE5C215D48178A2457F9D730EE
6938E1BA8AA780B544FD555E35E0E849F7EAB85D41FC56BBAF1D5853A06437EB
67132D3877B5E9635D9C8B937E62FEB6CA19265FFBF5259174B7C713DAA31E26
8BF4F188EFDE95404913076437F8D1E152C8508D33C8AA921216F5F8224E624F
7DFF33E77175C8EA5084E4FE16DAFC816305CA890942CFC59544FCA23F82DE37
53ABC053BB7913AF3BD2F56B6D37C18EBA26AB5CE772F046A8A2F2AFAF523B7D
F492F1A3AC7F7CE7255162487747211E8A0A7F8260F95C637A964851BC974162
1F7AB4259D515A1366961B324EAFA323780BCBAF02019730B48885C07966F1AB
E240732364B9AD976FE9ECCE6C7679D079EFC6E4DC2C28689000B825BF01A7B7
CD40EF98B35DD89037790A4C3B0F3AFBF4C9A74E69328212826EEBF110938EC3
E1FDD602C705DFBA796096C8777280134C31A11B5028C681524033DB961A7490
317BC56E189A2CEB26FAD086771CF67A1472336E9C47500933B618AE91EBD55B
E3BD3AFF9B375F02A164D299D3203D56C4819E17D95861C802D4DC4FC1E20A83
DFAEB6BCC01E8BF9A8360B5EA4FCC4C05C79C977D43C269F91EE2CBA7E9417F1
2A9B3276458ED8AC5B7100B5F46AE49500373F76A14F005DA5F024BA01C2BC3E
7EF9B389B35103597413721FB1618A920DD508C73D92376AF977A4FA14F0FB42
9BC4326F0F3AD6BBCFD938873F57BA5D8B740BA0965A7CB8406301DB3EE92EC3
121609D18C8ABA420CB8111864CF9F38220442036C4F2452E16D505768E4F337
1DD8FCC6EF9BAD4BAA82CD86C728BB0DF36863247B0D1145C6F6531B5D3B862D
D0BB81D917D4CDDE9A8A1C950D8D2057EAA52A8A4B6D9E1B7FB3EAF74E61B3AA
05F5FF346715BFE8766DD599341AC21F3668FC2B3D6A28A42C7B39B305366090
70DBF33ED4012B1766BDB4407B7319A3D41062C4115ABA23AB8C531BBBCD9BD4
74D485844E0B87727BD2E1E1B6C876252D8B923FB8FA5218CBCF794709F00A77
35BA1C01241FCF6F3314998227270FB06497589A27735FF345E6AF6387587C22
CAF3525FCC302D702CCD5FC1FC03E4D0A97A30ED526392DCB552BDF210F4DF75
AFE37931807B00EF2C9A67B54A0FDDCFC66B6B1B81FCA9494010857FD6C603AF
44D41DD281C457FBF6521467D9475F9D8BACBA0314C0DA26B58A7EF6D0FEBB39
8324C5B7C8226139DC036E35CF333821B421BA2DC2A8766C8EB930D9A834BFE4
684418DF9851DDA61B99815868BDCC74D90E687472D8F57B6AE4437F91DD9D32
CF139FDAEB2D598805E0EB64D1A11B21DA49AB1910D32D6B4609B1161192D60B
9DA163CF35B7019DCA2F56D2E861A8B7B0B3180B2B9335AD192748273E167FC6
E42DA02FB7C65964EEB60A467F7DDBD0BAF518A5BCFD07EECFC91A506B60B488
42D001B38AEAECEE419382F651772845C3128B568ADA5E0B514B730D633A0A86
48AB24EA66960D0E70052417DB1FDD0C6E43C62104E977C453A900CE16E84BCE
C58F59E9BBA93691B05AF577697FB05173637F0C9DA46CDE5DF49A7C6B527AC7
01C025DE34FFA3C636CA871B40F0D45CBEC96DEE31A842E8EAED239E0034EDBE
581E657B67F561609BEB935584B332487B8E9672BCF7DD9C5953ABFA38F36302
D3FD718EFA79F32A905F8E40D00B4ACA760FAA89A5687A56948CB3F1CDF8AA30
FA9E13CEBD0464300C9E6F59452F9DD7482D6F0E43577843B4BFA8B273B8F87C
65C4968D5E0E0DD7687775D9F98EC63B4EFB8110E5088035544DB1D96BD5D816
A58A1940FE15C4FF27E3FC64B3B5FB3752F7B0E7786225A8980F0FC749C436EB
B4595513665A73862FFD7370A709DC8781558FFFE64901410CD5EE5B3FE0D7EF
FCD478904A72A0FB5903478B07D2E158D8E8299EF54374E2DA82164A0AA5F2EB
DD396C051D303D125DED8B835B6869C6C25EA36F701EC75ADB628BAE7583FD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 99 /c put
dup 101 /e put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D725429F5DF8942138C07E0890570EB1
55A6A8FA3EC5F09F387D5537A7FBD4A0689DF68098DCAA640A18AA4E71209E70
FB7CA8A3758052ABEE0CA1C4BB3BD01587F3CE2B28DCF0E6F201D40FB6AD6E6C
8DE80AF69FCFA0BE607E0F1CFB92D1CEA3CFCD013D4D4CAB4A992BAA0EB0737D
93D3E3CA3B2657BE16C5CBAEEAFB46D292A49875C66900A3E24364059548C910
762174C616C9F29AD412B83A4A76A51FE7245FE485C7A3DD52E94CD81D7A1F12
7133DCD2EF907165314C88B95F04DE9FD32E960DE2CF2E3C3BC38018A24BBD2C
BBD3F1C4787C4DE96E7CC40FAC4E08C58E906A89185CE41883D0222D18151671
3F060DC1BEFBFA1DF892835BC74FC8B3D661E15E9EB74F610C6D22AA8A3382E2
719F5D8E43DE52E03D2980103D89FCA0CA6436726575F9CCE65395F991F5AA4E
012DAA0FBBD6114B2C64AF9366E2F919DD8B77979182822DE4D72E35ECE7BC63
793C5BD84884F62D5050B3BEFF018E64710D65BA58430E15FFCE3C9E4C12A079
5FEEC8DC3B373EEC203A343E7420D79A328EDEA98AE2348F4114027A1B895BFD
BBD7080F21E52ACDE0D96799B54FCC453FC26C021A0B54683D8B114D266402EA
E5EAA96A154F7A297198E3FDBA25E5BD03AE612624712F6C02A650DD71577117
23E018387410FDB18145B4C8CFE5AC9647A1B8E1B6E39951395C63E50BED91E6
6A510CBD2F2586A8560ED41B5AD68FD1B0B6C27061BAFE9EB8B1825E5466F522
89243A13049FB3B464E4C54CAAF6A97EA238ED03F3439B549BEE2F1E3CE6C907
1F8EF66DEC09FAEE905FFC5016A37564398609596757DD8406FD71584B7AC2C7
534E655CDFEFF7ACE0FA735D0E06198411E50027BF6826A897DB16082DCFA0DA
F9CC44BC5912067F312BC234586BC6AC6F976BAE2BD1B288C20DBBC635B7604A
09A2C21B2EA1942344B4EC4FDE364AD647EC4553147599CF9981E095C8E4DF2A
7F4273A1B83C6F262C3816FF975FA8977F9AF8A78DD1CE8FDA890C55A7D7BC7C
0AABA16124406333683DCC90DA528808CB54DE0F54848E6140B5776B4AA7B355
E36EF011093BEEE5D490382D4CBB9D58F1161CF319A4B1F0A512B9F8A1CF70B6
B7D7FF8F754DD2C2D0A5AAD88B273CA4C87FEA8F8E239DC39C00F5C2967F2137
EE19DA80BFBC128036C99DBC6AACAC63A7A7CB6522A1D57125E3557E2A276B63
327E0104266337E2F283BB6D3F58D22AE568C7454037E9D39993128687A923FA
C3B1EAE0AAC2434DBE01A7970EDBB314D581AE421973C9FF7C7F806B02D5EA78
C3F1BA76B04B1A180CA1EF7EC642576D35D03D2EC054BB2DBBBA7F681E1C0793
EBC626CB7F6B7AF8A7F3CE7A3FC5B1AF189101F024988E32DCF0F9D17B4D16F8
D47AFBE75502A0D63F0989B8865F8D3482C011403F6053A1ACD457D6F534CB2A
DFA2C8DDB1A7A201D6A595FD4C2AEFEB31E27F149F3FD1E8926C5977DBDE40C6
D3510C9ACCB9CFB409B719612B36FD7A6B4E34019D2C93CBAA327BDCF09A70F3
935E1E2E2C93FB4FC39644F152DDE695CA42F33190DB7ED94EE8C1FA5C438E50
E0E716BBACAFF50CF426EEFB233126C40D82669262665F131A2E2FA459F6E0A6
9A5E499AE26FDC01550A2E84C6F8F570F56D2A37967678AF6599A1C5FA6CE741
2451F831AB5E996F993B2725B2DF84E4B7084280FECD855719ACCDE5D8CA59AC
19228A4C386414D0986B73B529E71E7FDA6F4202983DD6DF1B4DD40EB6F33A30
8C4541DFA224174E54C4DD4DE81D5F28DEF25452DB873EE75B355E3CE1CF3C06
350F435E6C7E327A2FBF1834FFD23B58A9D98E912F7DE1EF33979AC21EDD5BE8
0BB677C002F5B6D7CB452267A9122499B024DFB6E51A32CA99693DD7B5E6A0B1
A84BB2975D741577858DDDF087B79FBDCC828A6ABA50FE3F5B2C986AFFC97C8E
202A336708CFD34651FC509316A41767AADFBD5ED727559E5E8525CA32581104
9D5958EA2630F4017BD69676222030AFAF4982AF9CEC125F7A321D29B4B65364
E8B7973CF1D9D17EBBFFBF40F19E20B063DC3D3B4A5EA136013AA090B166D3FD
F4855CA18AC8852282458815E4669CC6E1FEB0799E5BC5EFEC8338131358D97D
FFCE05DC54B842DDB747BA50B22E5B3B7BACC6DBBBE242ACD70C766FC921A4A5
FF6951AF7FA30D4D4C440AF2075A912B62E15E55C8799CB3AEF5C2386A29128E
B3AFE12A55EDB38896D4EF737FC942941CDC64F5AA3D002646ED5FBE8ED35340
B72A3F0C45619A2233EF1DB19584009EB1AB483CCC03CA17635ED832B6719E35
80C96F9ABB8A7AA1AFC8A0A9D347062D8E464EDDF61BDB8BD5FC3EE65A9B67DF
CA34CC5E795B61F037CFF6E016D2BA1584DDEEE1C95474856975D056ABE6719D
C76007197ED7A1F3E7593FFCB4435C869424548716D82ED2FAD6A48279069F7C
12DCBFA7BA79905C3ACAF9B34EC8F4F6AA5A9D11204BD3048ABC23D224E53B70
4E2E14B36B0466498543AE1059916C8A8C678FAD774581827E7E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 8000 8000
(C:/Users/jesus/Documents/LaTeX/JARMTL44/JARMTL44.dvi)
@start /Fa 255[1033{}1 1328.35 /CMSY10 rf /Fb 150[320
86[439 18[{}2 885.568 /CMMI8 rf /Fc 134[634 739 10[1138
3[444 3[603 18[990 8[574 13[361 40[606 18[{}9 1328.35
/CMMI12 rf /Fd 192[1107 7[830 1107 8[1107 17[1107 27[{}5
1106.96 /LINE10 rf /Fe 134[686 686 2[723 1[513 506 1[723
650 723 1084 361 1[397 361 1[650 397 578 723 578 1[650
20[813 5[849 885 7[1012 2[361 650 650 650 650 650 650
650 650 650 650 1[361 2[1012 1[506 506 40[{}37 1328.35
/CMR12 rf /Ff 138[1196 1[849 879 3[1196 4[598 1[1076
1[982 1196 956 1[1046 23[801 53[1076 6[1196 12[{}13 1912.83
/CMBX12 rf /Fg 137[640 3[475 2[606 673 1010 3[337 3[539
673 1[673 42[606 3[606 606 606 606 48[{}14 1212.12 /CMR10
rf /Fh 133[694 4[867 607 616 607 2[780 867 4[434 3[694
867 2[780 14[1149 4[1430 2[802 8[1170 65[{}15 1594.02
/CMR12 rf /Fi 139[746 9[689 689 4[1148 1033 18[1523 10[1523
69[{}7 2295.84 /CMTI12 rf /Fj 140[825 2[1173 1053 1173
1773 573 1[633 4[933 1[933 29[1442 69[{}10 2295.84 /CMR17
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
4317 5978 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 4317 5978 a 4317 5978 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 4317 5978 a 4317
5978 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 4317 5978 a 0 TeXcolorgray 0 TeXcolorgray 15643
12675 a Fj(Ejemplos)693 b(con)g Fi(jPicEdt)15936 16618
y Fh(Jesus)519 b(Adrian)i(Rosas)f(Martinez)19352 19524
y Fg(23)405 b(de)f(no)-34 b(viem)g(bre)404 b(de)g(2017)4180
24938 y Ff(\023)4317 25400 y(Indice)717 b(de)g(\014guras)6268
28321 y Fe(1.)1981 b(La)433 b(exp)36 b(onencial)435 b(compleja)f(de)f
(Euler)780 b(.)665 b(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)
h(.)f(.)p 0 TeXcolorgray 1835 w(2)p 0 TeXcolorgray 6268
29926 a(2.)1981 b(Las)433 b(funciones)h(seno)f(y)h(coseno)1126
b(.)664 b(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f
(.)h(.)f(.)p 0 TeXcolorgray 1835 w(2)p 0 TeXcolorgray
0 TeXcolorgray 25578 70015 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 23191 19189 48 12268 v 23191
6921 48 38 v 23215 7990 a Fd(6)21777 20722 y Fe(0)21594
6354 y Fc(I)104 b(m)36207 19148 y(R)11 b(e)p 23215 19212
12413 48 v 35627 19212 38 48 v 34558 19188 a Fd(-)p 10812
19171 12404 48 v 10774 19171 38 48 v 10774 19147 a(\033)p
23191 31551 48 12404 v 23191 31589 48 38 v 23215 31589
a(?)p 24437 17585 35 95 v 24471 17620 V 24506 17655 V
24497 17677 95 35 v 24531 17711 V 24566 17746 V 24597
17806 95 57 v 24645 17863 V 24692 17916 V 24736 17973
V 24780 18036 95 60 v 24821 18096 V 24859 18159 95 63
v 24893 18222 V 24928 18281 V 24960 18344 V 24991 18477
95 130 v 25045 18609 95 133 v 25092 18744 95 136 v 25126
18877 V 25155 19012 V 25174 19154 95 139 v 32616 19126
95 152 v 32613 19277 V 32607 19428 V 32600 19579 V 32588
19730 V 32575 19881 V 32560 20030 V 32541 20181 V 32519
20332 V 32497 20480 95 149 v 32468 20628 V 32440 20779
V 32408 20927 V 32374 21075 V 32336 21220 V 32298 21368
95 145 v 32254 21513 V 32210 21658 V 32163 21803 V 32112
21948 V 32062 22089 95 142 v 32005 22231 V 31948 22373
95 70 v 31977 22304 V 31889 22511 V 31917 22442 V 31826
22650 V 31857 22581 V 31763 22789 V 31794 22719 V 31697
22927 V 31731 22858 V 31624 23063 V 31659 22993 V 31555
23195 95 67 v 31589 23129 V 31479 23330 V 31517 23264
V 31404 23463 V 31441 23396 V 31325 23592 V 31366 23526
V 31243 23724 V 31284 23658 V 31158 23850 95 63 v 31199
23787 V 31073 23979 V 31117 23916 V 30985 24105 V 31029
24042 V 30893 24228 V 30937 24165 V 30802 24351 95 60
v 30849 24291 V 30708 24470 95 41 v 30739 24429 V 30771
24389 V 30610 24590 V 30641 24549 V 30673 24508 V 30512
24710 95 38 v 30544 24672 V 30575 24634 V 30411 24826
V 30446 24789 V 30481 24751 V 30308 24940 V 30342 24902
V 30377 24864 V 30204 25053 V 30238 25015 V 30273 24978
V 30097 25166 V 30131 25129 V 30166 25091 V 29989 25274
V 30027 25236 V 30065 25198 V 29923 25431 38 95 v 29961
25396 V 29999 25362 V 29813 25535 V 29851 25500 V 29889
25466 V 29697 25639 V 29734 25604 V 29772 25570 V 29580
25743 V 29618 25708 V 29656 25674 V 29463 25844 V 29501
25809 V 29539 25774 V 29344 25941 41 95 v 29385 25910
V 29426 25878 V 29221 26039 V 29262 26007 V 29303 25976
V 29098 26133 V 29139 26102 V 29180 26070 V 28975 26225
63 95 v 29038 26178 V 28846 26316 V 28909 26272 V 28720
26404 V 28783 26360 V 28591 26489 67 95 v 28657 26445
V 28459 26574 V 28525 26533 V 28326 26656 V 28393 26615
V 28191 26738 V 28257 26697 V 28056 26814 V 28122 26776
V 27920 26889 70 95 v 27989 26852 V 27782 26965 V 27851
26927 V 27643 27034 V 27712 27000 V 27501 27103 V 27571
27069 V 27360 27170 73 95 v 27432 27135 V 27218 27236
V 27290 27204 V 27073 27296 V 27145 27264 V 26928 27355
V 27000 27327 V 26783 27415 V 26856 27387 V 26635 27469
149 95 v 26487 27522 V 26336 27573 V 26188 27620 152
95 v 26037 27664 V 25886 27708 V 25734 27749 V 25580
27787 155 95 v 25426 27822 V 25271 27853 V 25117 27885
V 24963 27913 V 24808 27938 V 24651 27960 158 95 v 24493
27982 V 24339 27998 V 24182 28014 V 24024 28026 V 23867
28039 V 23709 28045 V 23549 28052 V 23391 28052 V 23234
28052 V 23076 28052 V 22919 28045 V 22761 28039 V 22604
28026 V 22446 28014 V 22289 27998 V 22131 27982 V 21974
27960 V 21819 27938 V 21665 27913 155 95 v 21508 27885
V 21353 27853 V 21199 27822 V 21045 27787 V 20893 27749
V 20742 27708 152 95 v 20588 27664 V 20440 27620 V 20289
27573 V 20141 27522 149 95 v 19993 27469 V 19845 27415
V 19700 27355 73 95 v 19772 27384 V 19555 27296 V 19627
27324 V 19410 27236 V 19482 27267 V 19265 27170 V 19338
27201 V 19123 27103 V 19196 27138 V 18985 27034 70 95
v 19054 27069 V 18843 26965 V 18912 27000 V 18708 26889
V 18777 26927 V 18569 26814 V 18638 26852 V 18434 26738
67 95 v 18500 26776 V 18301 26656 V 18367 26697 V 18169
26574 V 18235 26615 V 18037 26489 V 18103 26530 V 17908
26404 V 17974 26448 V 17778 26316 63 95 v 17841 26360
V 17653 26225 V 17715 26269 V 17527 26133 V 17590 26181
V 17404 26039 41 95 v 17445 26070 V 17486 26102 V 17284
25941 V 17325 25973 V 17366 26004 V 17164 25844 V 17205
25875 V 17246 25907 V 17045 25743 38 95 v 17082 25778
V 17120 25812 V 16928 25639 V 16966 25674 V 17004 25708
V 16815 25535 V 16853 25570 V 16890 25604 V 16701 25431
V 16739 25466 V 16777 25500 V 16591 25321 V 16629 25355
V 16667 25390 V 16434 25204 95 38 v 16471 25242 V 16509
25280 V 16327 25091 V 16361 25129 V 16396 25166 V 16223
24978 V 16257 25015 V 16292 25053 V 16119 24864 V 16153
24902 V 16188 24940 V 16018 24748 V 16053 24785 V 16087
24823 V 15920 24628 V 15952 24666 V 15983 24703 V 15823
24511 95 41 v 15854 24552 V 15886 24593 V 15728 24392
V 15760 24433 V 15791 24474 V 15637 24288 95 60 v 15684
24348 V 15545 24168 95 63 v 15590 24231 V 15457 24042
V 15501 24105 V 15372 23913 V 15416 23976 V 15290 23787
V 15331 23850 V 15208 23658 95 67 v 15249 23724 V 15130
23529 V 15171 23595 V 15051 23396 V 15089 23463 V 14979
23261 V 15016 23327 V 14906 23129 V 14941 23195 V 14837
22996 95 70 v 14871 23066 V 14771 22858 V 14805 22927
V 14704 22719 V 14736 22789 V 14641 22581 V 14673 22650
V 14582 22442 V 14610 22511 V 14525 22300 V 14553 22370
V 14471 22231 95 142 v 14418 22089 V 14367 21948 95 145
v 14320 21803 V 14276 21658 V 14235 21513 V 14194 21365
V 14156 21223 95 149 v 14122 21075 V 14090 20927 V 14062
20776 V 14037 20628 V 14012 20480 V 13990 20332 95 152
v 13971 20181 V 13955 20033 V 13942 19881 V 13933 19730
V 13923 19579 V 13917 19428 V 13917 19277 V 13917 19126
V 13917 18974 V 13917 18823 V 13923 18672 V 13933 18521
V 13942 18370 V 13955 18218 V 13971 18067 V 13990 17916
V 14012 17768 95 149 v 14037 17617 V 14062 17469 V 14090
17321 V 14122 17173 V 14156 17025 V 14194 16877 95 145
v 14235 16732 V 14276 16584 V 14320 16439 V 14367 16297
V 14418 16152 95 142 v 14471 16011 V 14525 15869 95 70
v 14553 15800 V 14582 15727 V 14610 15658 V 14641 15585
V 14673 15516 V 14704 15447 V 14736 15378 V 14771 15308
V 14805 15239 V 14837 15173 V 14871 15104 V 14906 15037
95 67 v 14941 14971 V 14979 14902 V 15016 14836 V 15051
14770 V 15089 14704 V 15130 14637 V 15171 14571 V 15208
14505 V 15249 14439 V 15290 14376 95 63 v 15331 14313
V 15372 14247 V 15416 14184 V 15457 14121 V 15501 14058
V 15545 13995 V 15590 13932 V 15637 13872 95 60 v 15684
13812 V 15728 13749 95 41 v 15760 13708 V 15791 13667
V 15823 13626 V 15854 13585 V 15886 13544 V 15920 13507
95 38 v 15952 13469 V 15983 13431 V 16018 13390 V 16053
13352 V 16087 13315 V 16119 13274 V 16153 13236 V 16188
13198 V 16223 13157 V 16257 13119 V 16292 13082 V 16327
13044 V 16361 13006 V 16396 12968 V 16434 12933 V 16471
12896 V 16509 12858 V 16591 12870 38 95 v 16629 12836
V 16667 12801 V 16701 12763 V 16739 12729 V 16777 12694
V 16815 12656 V 16853 12622 V 16890 12587 V 16928 12552
V 16966 12518 V 17004 12483 V 17045 12452 V 17082 12417
V 17120 12382 V 17164 12351 41 95 v 17205 12319 V 17246
12288 V 17284 12250 V 17325 12219 V 17366 12187 V 17404
12156 V 17445 12124 V 17486 12093 V 17527 12061 63 95
v 17590 12014 V 17653 11967 V 17715 11922 V 17778 11878
V 17841 11834 V 17908 11790 67 95 v 17974 11746 V 18037
11702 V 18103 11661 V 18169 11617 V 18235 11576 V 18301
11535 V 18367 11494 V 18434 11456 V 18500 11419 V 18569
11378 70 95 v 18638 11340 V 18708 11302 V 18777 11264
V 18843 11230 V 18912 11195 V 18985 11157 V 19054 11122
V 19123 11088 73 95 v 19196 11053 V 19265 11022 V 19338
10990 V 19410 10959 V 19482 10927 V 19555 10896 V 19627
10867 V 19700 10836 V 19772 10808 V 19845 10779 149 95
v 19993 10722 V 20141 10672 V 20289 10622 152 95 v 20440
10574 V 20588 10527 V 20742 10486 V 20893 10445 155 95
v 21045 10408 V 21199 10373 V 21353 10338 V 21508 10307
V 21665 10282 V 21819 10256 158 95 v 21974 10231 V 22131
10212 V 22289 10193 V 22446 10178 V 22604 10165 V 22761
10156 V 22919 10149 V 23076 10143 V 23234 10140 V 23391
10140 V 23549 10143 V 23709 10149 V 23867 10156 V 24024
10165 V 24182 10178 V 24339 10193 V 24493 10212 V 24651
10231 V 24808 10256 155 95 v 24963 10282 V 25117 10307
V 25271 10338 V 25426 10373 V 25580 10408 V 25734 10445
152 95 v 25886 10486 V 26037 10527 V 26188 10574 V 26336
10622 149 95 v 26487 10672 V 26635 10722 V 26783 10779
73 95 v 26856 10808 V 26928 10836 V 27000 10864 V 27073
10896 V 27145 10927 V 27218 10959 V 27290 10990 V 27360
11022 V 27432 11056 V 27501 11088 70 95 v 27571 11122
V 27643 11157 V 27712 11192 V 27782 11230 V 27851 11267
V 27920 11302 V 27989 11340 V 28056 11378 67 95 v 28122
11415 V 28191 11456 V 28257 11497 V 28326 11535 V 28393
11576 V 28459 11617 V 28525 11658 V 28591 11702 V 28657
11746 V 28720 11790 63 95 v 28783 11834 V 28846 11878
V 28909 11922 V 28975 11967 V 29038 12014 V 29098 12061
41 95 v 29139 12093 V 29180 12124 V 29221 12156 V 29262
12187 V 29303 12219 V 29344 12250 V 29385 12282 V 29426
12313 V 29463 12351 38 95 v 29501 12385 V 29539 12420
V 29580 12452 V 29618 12486 V 29656 12521 V 29697 12552
V 29734 12587 V 29772 12622 V 29813 12656 V 29851 12691
V 29889 12726 V 29923 12763 V 29961 12798 V 29999 12833
V 29989 12861 95 38 v 30027 12899 V 30065 12937 V 30097
12971 V 30131 13009 V 30166 13047 V 30204 13082 V 30238
13119 V 30273 13157 V 30308 13195 V 30342 13233 V 30377
13270 V 30411 13311 V 30446 13349 V 30481 13387 V 30512
13428 V 30544 13466 V 30575 13504 V 30610 13548 95 41
v 30641 13589 V 30673 13630 V 30708 13667 V 30739 13708
V 30771 13749 V 30802 13809 95 60 v 30849 13869 V 30893
13935 95 63 v 30937 13998 V 30985 14058 V 31029 14121
V 31073 14184 V 31117 14247 V 31158 14310 V 31199 14373
V 31243 14442 95 67 v 31284 14508 V 31325 14571 V 31366
14637 V 31404 14704 V 31441 14770 V 31479 14836 V 31517
14902 V 31555 14968 V 31589 15034 V 31624 15107 95 70
v 31659 15176 V 31697 15242 V 31731 15311 V 31763 15378
V 31794 15447 V 31826 15516 V 31857 15585 V 31889 15655
V 31917 15724 V 31948 15796 V 31977 15866 V 32005 16011
95 142 v 32062 16152 V 32112 16297 95 145 v 32163 16442
V 32210 16584 V 32254 16729 V 32298 16877 V 32336 17025
95 149 v 32374 17173 V 32408 17321 V 32440 17469 V 32468
17617 V 32497 17765 V 32519 17919 95 152 v 32541 18067
V 32560 18218 V 32575 18370 V 32588 18521 V 32600 18672
V 32607 18823 V 32613 18974 V 23167 19148 95 54 v 23205
19094 V 23243 19041 V 23281 18987 V 23319 18933 V 23356
18880 V 23394 18826 V 23432 18773 V 23470 18719 V 23508
18666 V 23545 18612 V 23583 18559 V 23621 18505 V 23659
18452 V 23697 18398 V 23734 18344 V 23772 18291 V 23810
18237 V 23848 18184 V 23886 18130 V 23923 18077 V 23961
18023 V 23999 17970 V 24037 17916 V 24074 17863 V 24112
17809 V 24150 17756 V 24188 17702 V 24226 17648 V 24263
17595 V 24301 17541 V 24339 17488 V 24377 17434 V 24415
17381 V 24452 17327 V 24490 17274 V 24528 17220 V 24566
17167 V 24604 17113 V 24641 17059 V 24679 17006 V 24717
16952 V 24755 16899 V 24793 16845 V 24830 16792 V 24868
16738 V 24906 16685 V 24944 16631 V 24982 16578 V 25019
16524 V 25057 16470 V 25095 16417 V 25133 16363 V 25170
16310 V 25208 16256 V 25246 16203 V 25284 16149 V 25322
16096 V 25359 16042 V 25397 15989 V 25435 15935 V 25473
15882 V 25511 15828 V 25548 15774 V 25586 15721 V 25624
15667 V 25662 15614 V 25700 15560 V 25737 15507 V 25775
15453 V 25813 15400 V 25851 15346 V 25889 15293 V 25926
15239 V 25964 15185 V 26002 15132 V 26040 15078 V 26078
15025 V 26115 14971 V 26153 14918 V 26191 14864 V 26229
14811 V 26266 14757 V 26304 14704 V 26342 14650 V 26380
14597 V 26418 14543 V 26455 14489 V 26493 14436 V 26531
14382 V 26569 14329 V 26607 14275 V 26644 14222 V 26682
14168 V 26720 14115 V 26758 14061 V 26796 14008 V 26833
13954 V 26871 13900 V 26909 13847 V 26947 13793 V 26985
13740 V 27022 13686 V 27060 13633 V 27098 13579 V 27136
13526 V 27174 13472 V 27211 13419 V 27249 13365 V 27287
13311 V 27325 13258 V 27362 13204 V 27400 13151 V 27438
13097 V 27476 13044 V 27514 12990 V 27551 12937 V 27589
12883 V 27627 12830 V 27665 12776 V 27703 12723 V 27740
12669 V 27778 12615 V 27816 12562 V 27854 12508 V 27892
12455 V 27929 12401 V 27967 12348 V 28005 12294 V 28043
12241 V 28081 12187 V 28118 12134 V 28156 12080 V 28194
12026 V 28232 11973 V 28270 11919 V 28307 11866 V 28345
11812 V 28383 11759 V 28421 11705 V 28459 11652 V 27739
12724 a(7)p 23215 11715 312 95 v 23841 11715 V 24468
11715 V 25095 11715 V 25722 11715 V 26349 11715 V 26975
11715 V 27602 11715 V 28229 11715 V 28484 19148 95 325
v 28484 18496 V 28484 17844 V 28484 17192 V 28484 16540
V 28484 15888 V 28484 15236 V 28484 14584 V 28484 13932
V 28484 13280 V 28484 12628 V 28484 11976 V 25256 18229
a Fc(\022)24667 20462 y Fe(cos\()p Fc(\022)36 b Fe(\))33519
20757 y(1)28871 16330 y(sin\()p Fc(\022)g Fe(\))28972
10869 y Fc(e)29575 10387 y Fb(i\022)30785 10869 y Fe(=)369
b(cos\()p Fc(\022)36 b Fe(\))295 b(+)g Fc(i)221 b Fe(sin\()p
Fc(\022)36 b Fe(\))p 0 TeXcolorgray 13484 34458 a(Figura)433
b(1:)i(La)e(exp)36 b(onencial)435 b(compleja)f(de)f(Euler)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 4317 63348
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 0.0 0.0 0.0 227.62085 341.43127 227.62085
341.43127 0.0 0.0 0.0  /Lineto /lineto load def 0  setlinejoin false
Polygon  gsave 0.94 0.94 0.94  setrgbcolor  1. .setopacityalpha  fill
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 17.04312 227.62085 17.04312 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
17.04312 1.42262 17.04312 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
17.04312 227.62085 17.04312 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 34.14313 227.62085 34.14313 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
34.14313 1.42262 34.14313 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
34.14313 227.62085 34.14313 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { 34.14313 -11.38104 } PutCoor PutBegin  end
 4317
63348 a 3486 63646 a Fe(1)p Fc(;)q Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end

4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 51.24312 227.62085 51.24312 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
51.24312 1.42262 51.24312 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
51.24312 227.62085 51.24312 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 68.31468 227.62085 68.31468 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
68.31468 1.42262 68.31468 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
68.31468 227.62085 68.31468 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { 68.31468 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486 63646 a Fe(2)p Fc(;)q
Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 85.41473 227.62085 85.41473 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
85.41473 1.42262 85.41473 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
85.41473 227.62085 85.41473 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 102.4863 227.62085 102.4863 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
102.4863 1.42262 102.4863 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
102.4863 227.62085 102.4863 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { 102.4863 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486
63646 a Fe(3)p Fc(;)q Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 119.58629 227.62085 119.58629 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
119.58629 1.42262 119.58629 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
119.58629 227.62085 119.58629 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 136.6863 227.62085 136.6863 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
136.6863 1.42262 136.6863 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
136.6863 227.62085 136.6863 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { 136.6863 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486 63646 a Fe(4)p Fc(;)q
Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 153.75786 227.62085 153.75786 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
153.75786 1.42262 153.75786 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
153.75786 227.62085 153.75786 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 170.8579 227.62085 170.8579 0.0   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
170.8579 1.42262 170.8579 -2.84526   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
170.8579 227.62085 170.8579 226.19821   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { 170.8579 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486
63646 a Fe(5)p Fc(;)q Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 187.92946 227.62085 187.92946 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
187.92946 1.42262 187.92946 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
187.92946 227.62085 187.92946 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 205.02946 227.62085 205.02946 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
205.02946 1.42262 205.02946 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
205.02946 227.62085 205.02946 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { 205.02946 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486 63646 a Fe(6)p Fc(;)q
Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 222.12952 227.62085 222.12952 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
222.12952 1.42262 222.12952 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
222.12952 227.62085 222.12952 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 239.20108 227.62085 239.20108 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
239.20108 1.42262 239.20108 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
239.20108 227.62085 239.20108 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { 239.20108 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486
63646 a Fe(7)p Fc(;)q Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 256.30107 227.62085 256.30107 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
256.30107 1.42262 256.30107 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
256.30107 227.62085 256.30107 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 273.37263 227.62085 273.37263 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
273.37263 1.42262 273.37263 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
273.37263 227.62085 273.37263 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { 273.37263 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486 63646 a Fe(8)p Fc(;)q
Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 290.47264 227.62085 290.47264 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
290.47264 1.42262 290.47264 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
290.47264 227.62085 290.47264 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 307.57268 227.62085 307.57268 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
307.57268 1.42262 307.57268 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
307.57268 227.62085 307.57268 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { 307.57268 -11.38104 } PutCoor PutBegin  end
 4317 63348 a 3486
63646 a Fe(9)p Fc(;)q Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 324.64424 227.62085 324.64424 0.0   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
324.64424 1.42262 324.64424 -2.84526   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
324.64424 227.62085 324.64424 226.19821   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 22.76208 0.0 22.76208   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 22.76208 -2.84526 22.76208   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 22.76208 340.00864 22.76208   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { -5.69052 22.76208 } PutCoor PutBegin  end
 4317 63348 a 1622 63646 a Fa(\000)p Fe(0)p
Fc(;)q Fe(8)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 45.52417 0.0 45.52417   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 45.52417 -2.84526 45.52417   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 45.52417 340.00864 45.52417   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { -5.69052 45.52417 } PutCoor PutBegin  end
 4317 63348 a 1622
63646 a Fa(\000)p Fe(0)p Fc(;)q Fe(6)4317 63348 y
tx@Dict begin  PutEnd  end
 4317
63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 68.28625 0.0 68.28625   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 68.28625 -2.84526 68.28625   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 68.28625 340.00864 68.28625   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { -5.69052 68.28625 } PutCoor PutBegin  end
 4317 63348 a 1622 63646 a Fa(\000)p Fe(0)p
Fc(;)q Fe(4)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 91.04834 0.0 91.04834   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 91.04834 -2.84526 91.04834   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 91.04834 340.00864 91.04834   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { -5.69052 91.04834 } PutCoor PutBegin  end
 4317 63348 a 1622
63646 a Fa(\000)p Fe(0)p Fc(;)q Fe(2)4317 63348 y
tx@Dict begin  PutEnd  end
 4317
63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 113.81042 0.0 113.81042   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 113.81042 -2.84526 113.81042   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 113.81042 340.00864 113.81042   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { -5.69052 113.81042 } PutCoor PutBegin  end
 4317 63348 a 1622 63646 a Fa(\000)p Fe(0)p
Fc(;)q Fe(0)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 136.57251 0.0 136.57251   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 136.57251 -2.84526 136.57251   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 136.57251 340.00864 136.57251   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { -5.69052 136.57251 } PutCoor PutBegin  end
 4317 63348 a 2655
63646 a Fe(0)p Fc(;)q Fe(2)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 159.3346 0.0 159.3346   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 159.3346 -2.84526 159.3346   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 159.3346 340.00864 159.3346   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { -5.69052 159.3346 } PutCoor PutBegin  end
 4317 63348 a 2655 63646 a Fe(0)p Fc(;)q
Fe(4)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 182.09668 0.0 182.09668   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 182.09668 -2.84526 182.09668   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 182.09668 340.00864 182.09668   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4317 63348 a
tx@Dict begin  { -5.69052 182.09668 } PutCoor PutBegin  end
 4317 63348 a 2655
63646 a Fe(0)p Fc(;)q Fe(6)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0.78 0.78 0.78  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ } def  [ 341.43127 204.85876 0.0 204.85876   /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.85358 SLW 0.78 0.78 0.78  setrgbcolor
 1. .setopacityalpha   2.84526 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
1.42262 204.85876 -2.84526 204.85876   /Lineto /lineto load def 0 
setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 204.85876 340.00864 204.85876   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { -5.69052 204.85876 } PutCoor PutBegin  end
 4317 63348 a 2655 63646 a Fe(0)p Fc(;)q
Fe(8)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 227.62085 341.43127 0.0   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
341.43127 227.62085 0.0 227.62085   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1. 2.84526 2.   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.25 1. 2.84526 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 341.43127 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1. 2.84526 2.   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85358 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.25 1. 2.84526 2.   1. .setopacityalpha
 Arrow  EndArrow  } def  [ 0.0 227.62085 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.85358 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { 355.65758 0.0 } PutCoor PutBegin  end
 4317 63348 a 3947 63634 a Fc(x)4317 63348
y
tx@Dict begin  PutEnd  end
 4317 63348 a 4317 63348 a
tx@Dict begin  { 0.0 241.84715 } PutCoor PutBegin  end
 4317 63348 a 3976 63505 a
Fc(y)4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 369.88388 227.62085 369.88388 173.5609 428.6954
173.5609 428.6954 227.62085 369.88388 227.62085  /Lineto /lineto load
def 0  setlinejoin false Polygon  gsave 2.84526 -45. PtoC Shadow 0.25
 setgray gsave fill grestore stroke grestore gsave 0.94 0.94 0.94 
setrgbcolor gsave fill grestore stroke grestore gsave 0.94 0.94 0.94
 setrgbcolor  1. .setopacityalpha  fill  grestore gsave 0.85358 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 372.72914 210.54929 378.41966 210.54929
378.41966 216.2398 372.72914 216.2398 372.72914 210.54929  /Lineto
/lineto load def 0  setlinejoin false Polygon  gsave 2.84526 -45. PtoC
Shadow 0.25  setgray gsave fill grestore stroke grestore gsave 1 0
0  setrgbcolor gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial 4317
63348 a
tx@Dict begin  { 382.68755 213.39455 } PutCoor PutBegin  end
 4317 63348 a 332 x Fe(sin\()p Fc(x)p Fe(\))4317
63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0  setgray  [ 372.72914 187.7872 378.41966 187.7872 378.41966
193.47772 372.72914 193.47772 372.72914 187.7872  /Lineto /lineto load
def 0  setlinejoin false Polygon  gsave 2.84526 -45. PtoC Shadow 0.25
 setgray gsave fill grestore stroke grestore gsave 0 0 1  setrgbcolor
gsave fill grestore stroke grestore gsave 0 0 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
4317 63348 a
tx@Dict begin  { 382.68755 190.63246 } PutCoor PutBegin  end
 4317 63348 a 332 x Fe(cos)q(\()p Fc(x)p
Fe(\))4317 63348 y
tx@Dict begin  PutEnd  end
 4317 63348 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { }
def  [ 341.43127 52.7511 341.08984 53.71852 340.74838 54.6859 340.40697
55.65329 340.06555 56.64914 339.72409 57.64496 339.38268 58.61238 339.04126
59.63667 338.6998 60.63249 338.35838 61.62834 338.01697 62.65265 337.6755
63.67694 337.33409 64.70123 336.99266 65.72552 336.65125 66.74983 336.30978
67.80255 335.96837 68.82686 335.62695 69.8796 335.28549 70.93231 334.94408
71.98509 334.60266 73.06627 334.2612 74.11903 333.91978 75.20021 333.57837
76.25299 333.23691 77.33415 332.8955 78.41537 332.55406 79.49658 332.2126
80.57779 331.87119 81.68744 331.52977 82.76862 331.18831 83.87827 330.8469
84.95947 330.50548 86.06912 330.16402 87.17877 329.8226 88.28842 329.48119
89.39807 329.13972 90.50772 328.79831 91.61737 328.45688 92.72702 328.11546
93.86516 327.774 94.97481 327.43259 96.1129 327.0627 97.22255 326.72127
98.36067 326.37985 99.47032 326.03839 100.60841 325.69698 101.74649
325.35556 102.88463 325.0141 104.02272 324.67268 105.13237 324.33127
106.2705 323.9898 107.40858 323.64839 108.54666 323.30698 109.6848
322.96552 110.82289 322.6241 111.96101 322.28267 113.0991 321.94121
114.23718 321.5998 115.37532 321.25838 116.51341 320.91692 117.65154
320.5755 118.78963 320.23409 119.9277 319.89262 121.06584 319.55121
122.20393 319.2098 123.34206 318.86838 124.48015 318.52692 125.5898
318.18549 126.72787 317.84407 127.86601 317.50261 129.0041 317.1612
130.11375 316.81978 131.25188 316.47832 132.36153 316.1369 133.49962
315.79549 134.60927 315.45403 135.71892 315.11261 136.82857 314.7712
137.96669 314.42973 139.07634 314.08832 140.18599 313.74689 141.26717
313.40543 142.37682 313.06401 143.48647 312.7226 144.56767 312.38113
145.67732 312.03972 146.75854 311.6983 147.8682 311.35684 148.9494
311.01543 150.03058 310.67401 151.08334 310.3326 152.16452 309.99113
153.24573 309.6497 154.29846 309.30829 155.37967 308.96683 156.4324
308.62541 157.48518 308.284 158.53792 307.94254 159.56221 307.60112
160.61494 307.2597 161.63924 306.91824 162.66354 306.57683 163.68784
306.23541 164.71213 305.89395 165.73642 305.55254 166.76071 305.2111
167.75658 304.86964 168.7524 304.52823 169.74825 304.18681 170.74406
303.84535 171.71149 303.50394 172.67886 303.16252 173.67468 302.82106
174.6421 302.47964 175.58104 302.13823 176.54842 301.79681 177.48737
301.45535 178.4263 301.11392 179.3652 300.7725 180.27571 300.43105
181.21465 300.08963 182.1251 299.74821 183.03561 299.40675 183.91763
299.06534 184.82814 298.69543 185.71016 298.35402 186.5922 298.0126
187.44577 297.67114 188.3278 297.32973 189.18138 296.98831 190.03493
296.64685 190.86008 296.30544 191.71367 295.96402 192.53877 295.62256
193.33545 295.28114 194.1606 294.93971 194.95726 294.59825 195.75394
294.25684 196.5506 293.91542 197.31883 293.57396 198.08702 293.23254
198.85526 292.89113 199.595 292.54971 200.33481 292.20825 201.07455
291.86684 201.8143 291.52542 202.52562 291.18396 203.23694 290.84253
203.91982 290.50111 204.63113 290.15965 205.28552 289.81824 205.96841
289.47682 206.6228 289.13536 207.27725 288.79395 207.93164 288.45253
208.5576 288.11107 209.18356 287.76965 209.80952 287.42824 210.40701
287.08678 211.00453 286.74536 211.602 286.40393 212.1711 286.06247
212.74014 285.72105 213.30919 285.37964 213.8498 285.03818 214.3904
284.69676 214.90253 284.35535 215.44313 284.01393 215.92682 283.67247
216.439 283.33105 216.92268 282.98964 217.40637 282.64818 217.86162
282.30675 218.31683 281.96533 218.77208 281.62387 219.19885 281.28246
219.62567 280.94104 220.05244 280.59958 220.45078 280.25816 220.8491
279.91675 221.21901 279.57529 221.5889 279.23387 221.95876 278.89246
222.30022 278.551 222.64163 278.20958 222.95462 277.86815 223.29604
277.52669 223.58058 277.18527 223.89355 276.84386 224.17805 276.5024
224.43416 276.16098 224.69023 275.81956 224.94629 275.47815 225.20235
275.13669 225.42998 274.79527 225.62917 274.45386 225.82831 274.1124
226.0275 273.77097 226.22665 273.42955 226.3974 273.08809 226.56812
272.74667 226.71034 272.40526 226.85262 272.0638 226.96645 271.72238
227.08023 271.38097 227.19408 271.0395 227.27942 270.69809 227.36478
270.35667 227.42165 269.98677 227.50705 269.64536 227.53549 269.3039
227.5924 268.96248 227.5924 268.62106 227.62085 268.2796 227.62085
267.93819 227.62085 267.59676 227.5924 267.2553 227.56392 266.91388
227.50705 266.57246 227.45013 266.23105 227.39322 265.88959 227.30786
265.54817 227.2225 265.20676 227.13715 264.8653 227.02332 264.52388
226.88109 264.18246 226.76726 263.841 226.62498 263.49957 226.45427
263.15816 226.28357 262.8167 226.11285 262.47528 225.91367 262.13387
225.71452 261.7924 225.51534 261.45099 225.2877 261.10957 225.06012
260.76811 224.80402 260.4267 224.54796 260.08528 224.26346 259.74382
224.00735 259.4024 223.69437 259.06097 223.40987 258.71951 223.0969
258.3781 222.7839 258.03668 222.44244 257.69527 222.10103 257.3538
221.73112 257.01239 221.36128 256.67097 220.99138 256.32951 220.59305
255.9881 220.19472 255.64668 219.79637 255.30522 219.3696 254.96379
218.9428 254.62238 218.51602 254.28091 218.06076 253.9395 217.57707
253.59808 217.12183 253.25662 216.63814 252.9152 216.15445 252.57379
215.64227 252.23233 215.13014 251.89091 214.58954 251.5495 214.07742
251.20804 213.5368 250.86662 212.96777 250.52519 212.39868 250.18373
211.82964 249.84232 211.26059 249.5009 210.66307 249.15948 210.06558
248.81802 209.43962 248.47661 208.81367 248.1352 208.18771 247.79373
207.56175 247.45232 206.90735 247.1109 206.25294 246.76944 205.57007
246.42801 204.88719 246.0866 204.20436 245.74513 203.52148 245.40372
202.81017 245.0623 202.09885 244.72084 201.3591 244.37943 200.64778
244.03801 199.90799 243.69655 199.1398 243.35513 198.40001 243.01372
197.63182 242.67226 196.86359 242.33084 196.06691 241.98941 195.27025
241.61952 194.47357 241.2781 193.67691 240.93665 192.85176 240.59523
192.02664 240.2538 191.20149 239.91238 190.37639 239.57092 189.5228
239.2295 188.66922 238.88809 187.81563 238.54663 186.93361 238.20522
186.05159 237.8638 185.16956 237.52234 184.28754 237.18092 183.40552
236.83951 182.49501 236.49805 181.58455 236.15663 180.67404 235.8152
179.7351 235.47374 178.79616 235.13232 177.85722 234.79091 176.91827
234.44945 175.97939 234.10803 175.01196 233.76662 174.04459 233.42516
173.0772 233.08374 172.10982 232.74232 171.1424 232.40086 170.14659
232.05945 169.15073 231.71802 168.1549 231.3766 167.15906 231.03514
166.13477 230.69373 165.1389 230.35231 164.11461 230.01085 163.09035
229.66943 162.06606 229.32802 161.04176 228.98656 159.98898 228.64514
158.93625 228.30373 157.91196 227.96227 156.85922 227.62085 155.80644
227.27942 154.72528 226.93796 153.6725 226.59654 152.59134 226.25513
151.53856 225.91367 150.45738 225.57225 149.37617 225.23083 148.29497
224.88937 147.21379 224.54796 146.10414 224.20654 145.02293 223.86508
143.91328 223.52367 142.83206 223.18224 141.72241 222.84082 140.61276
222.49936 139.50311 222.15794 138.39346 221.81653 137.28381 221.47507
136.17416 221.13365 135.06451 220.79224 133.95486 220.45078 132.81674
220.10936 131.70709 219.76794 130.569 219.42648 129.45935 219.08507
128.32126 218.74364 127.18314 218.40218 126.04504 218.06076 124.9354
217.71935 123.79727 217.37788 122.65918 217.03647 121.52109 216.69505
120.38297 216.35359 119.24487 216.01218 118.10675 215.67076 116.96866
215.3293 115.83057 214.98788 114.69244 214.64645 113.55435 214.30504
112.41623 213.96358 111.27814 213.62216 110.14005 213.25227 109.00192
212.91084 107.86383 212.56943 106.72571 212.22797 105.61606 211.88655
104.47797 211.54514 103.33987 211.20367 102.20175 210.86226 101.06366
210.52084 99.92554 210.17938 98.81589 209.83797 97.6778 209.49655 96.56815
209.15509 95.43001 208.81367 94.32036 208.47224 93.18228 208.13078
92.07263 207.78937 90.96298 207.44795 89.85333 207.10649 88.74368 206.76508
87.63403 206.42366 86.52438 206.0822 85.41473 205.74078 84.30508 205.39937
83.22386 205.05795 82.11421 204.71649 81.033 204.37506 79.95183 204.03365
78.84218 203.69218 77.76097 203.35077 76.70824 203.00935 75.62703 202.6679
74.5458 202.32648 73.49307 201.98506 72.41187 201.6436 71.35913 201.30219
70.3064 200.96077 69.25363 200.61931 68.22932 200.2779 67.17659 199.93646
66.1523 199.595 65.09956 199.25359 64.07527 198.91217 63.05098 198.57071
62.05511 198.2293 61.03082 197.88788 60.035 197.54642 59.03915 197.205
58.04329 196.86359 57.04747 196.52217 56.05162 196.18071 55.08424 195.83928
54.11687 195.49786 53.14944 195.1564 52.18207 194.81499 51.24312 194.47357
50.27574 194.13211 49.3368 193.7907 48.39786 193.44928 47.4874 193.10782
46.54846 192.7664 45.63795 192.42499 44.7275 192.08353 43.84547 191.74211
42.93497 191.40068 42.05295 191.05922 41.17091 190.7178 40.2889 190.37639
39.4353 190.03493 38.58173 189.69351 37.72813 189.3521 36.87459 189.01064
36.04944 188.66922 35.22433 188.3278 34.39919 187.98639 33.60251 187.64493
32.7774 187.3035 31.98074 186.96208 31.21251 186.62062 30.41583 186.2792
29.6476 185.93779 28.90785 185.59633 28.13962 185.25491 27.39987 184.88501
26.66006 184.5436 25.92032 184.20218 25.209 183.86072 24.49768 183.5193
23.8148 183.17789 23.1035 182.83643 22.42065 182.49501 21.76622 182.1536
21.08339 181.81213 20.42894 181.47072 19.80302 181.12929 19.14859 180.78783
18.52263 180.44641 17.89667 180.105 17.29918 179.76353 16.70166 179.42212
16.10417 179.0807 15.53514 178.73929 14.96605 178.39783 14.397 178.05641
13.8564 177.715 13.3158 177.37354 12.77522 177.0321 12.26306 176.69069
11.75093 176.34923 11.26724 176.00781 10.78351 175.6664 10.29982 175.32494
9.81613 174.98352 9.36089 174.6421 8.93411 174.30064 8.47885 173.95923
8.05208 173.61781 7.65375 173.27635 7.22693 172.93494 6.85709 172.5935
6.45874 172.25204 6.08885 171.91063 5.71895 171.56921 5.37753 171.22775
5.03612 170.88634 4.69466 170.54492 4.38167 170.2035 4.0687 169.86205
3.7842 169.52063 3.49965 169.17921 3.21515 168.83775 2.95905 168.49632
2.70299 168.1549 2.47536 167.81345 2.24773 167.47203 2.02014 167.13062
1.82095 166.78915 1.62181 166.44774 1.42262 166.10632 1.2519 165.76486
1.0812 165.42345 0.93893 165.08203 0.79666 164.74057 0.68288 164.39915
0.5406 164.05772 0.45525 163.71626 0.34142 163.37485 0.25606 163.03343
0.19919 162.69197 0.14226 162.35056 0.08534 162.00914 0.05692 161.66772
0.02843 161.32626 0.0 160.98485 0.0 160.64343 0.0 160.30197 0.02843
159.96054 0.05692 159.61913 0.08534 159.27766 0.14226 158.93625 0.22762
158.59483 0.28453 158.25337 0.36989 157.91196 0.48369 157.57054 0.59752
157.22908 0.7113 156.88766 0.8251 156.54625 0.96738 156.17635 1.13808
155.83493 1.30884 155.49347 1.47954 155.15205 1.67868 154.81064 1.87787
154.46918 2.07703 154.12776 2.30464 153.78633 2.53227 153.44487 2.78833
153.10345 3.04445 152.76204 3.3005 152.42062 3.585 152.07916 3.86955
151.73775 4.1541 151.39633 4.46707 151.05487 4.80849 150.71346 5.12148
150.37204 5.46289 150.03058 5.83278 149.68915 6.20264 149.34773 6.57254
149.00627 6.94243 148.66486 7.34077 148.32344 7.76755 147.98198 8.16588
147.64056 8.5927 147.29915 9.0479 146.95769 9.50316 146.61627 9.9584
146.27486 10.41365 145.9334 10.89734 145.59198 11.40947 145.25055 11.89316
144.90909 12.40533 144.56767 12.94594 144.22626 13.45807 143.88484
13.99867 143.54338 14.56772 143.20197 15.10832 142.86055 15.70584 142.51909
16.27489 142.17767 16.87236 141.83626 17.4699 141.4948 18.06741 141.15337
18.69337 140.81195 19.31929 140.47049 19.97374 140.12907 20.62813 139.78766
21.28253 139.4462 21.93697 139.10478 22.61981 138.76337 23.30269 138.4219
23.98552 138.08049 24.69684 137.73907 25.40814 137.39761 26.14795 137.0562
26.85925 136.71477 27.59901 136.3733 28.3388 136.03189 29.107 135.69048
29.87523 135.34906 30.64346 135.0076 31.41165 134.66618 32.20836 134.32477
33.00504 133.9833 33.83014 133.64189 34.62682 133.30048 35.45197 132.95901
36.27707 132.61758 37.13065 132.27617 37.95576 131.93471 38.80934 131.59329
39.66293 131.25188 40.54495 130.91042 41.42699 130.569 42.309 130.22758
43.19102 129.88612 44.07309 129.54471 44.98355 129.2033 45.89406 128.86183
46.80452 128.52042 47.74347 128.17899 48.65396 127.8091 49.59286 127.46768
50.56029 127.12622 51.49922 126.7848 52.43813 126.44337 53.40555 126.10196
54.37292 125.7605 55.3403 125.41908 56.33617 125.07767 57.33197 124.7362
58.2994 124.39479 59.29521 124.05338 60.3195 123.71191 61.31537 123.3705
62.33966 123.02908 63.33548 122.68762 64.35977 122.3462 65.38406 122.00478
66.43684 121.66331 67.46114 121.3219 68.51387 120.98048 69.5666 120.63902
70.5909 120.2976 71.67212 119.95619 72.72485 119.61473 73.77757 119.27332
74.8588 118.9319 75.91153 118.59044 76.99274 118.24902 78.07394 117.9076
79.15517 117.56618 80.23633 117.22472 81.31755 116.8833 82.4272 116.54189
83.5084 116.20042 84.61806 115.85901 85.7277 115.5176 86.80888 115.17613
87.91853 114.83472 89.02818 114.4933 90.13783 114.15184 91.27596 113.81042
92.3856 113.469 93.49525 113.12753 94.63335 112.78612 95.743 112.4447
96.88112 112.10324 97.99077 111.76183 99.12886 111.42041 100.267 111.07895
101.37665 110.73753 102.51472 110.39612 103.65282 110.05466 104.79094
109.71324 105.92903 109.37181 107.06717 109.0304 108.17682 108.68893
109.3149 108.34752 110.45303 108.0061 111.59111 107.66464 112.7292
107.32323 113.86734 106.98181 115.00542 106.64035 116.14355 106.29893
117.28163 105.95752 118.41972 105.61606 119.55786 105.27464 120.69594
104.93321 121.83408 104.59175 122.97215 104.25034 124.11024 103.90892
125.24838 103.56746 126.35803 103.22604 127.49611 102.88463 128.63425
102.54317 129.77232 102.20175 130.88199 101.86034 132.02007 101.51888
133.12971 101.17746 134.23936 100.83603 135.3775 100.49461 136.48715
100.15315 137.5968 99.81174 138.70645 99.44185 139.8161 99.10042 140.92575
98.759 142.0354 98.41754 143.14505 98.07613 144.22626 97.73471 145.3359
97.39325 146.41713 97.05183 147.49829 96.71042 148.5795 96.36896 149.68915
96.02754 150.74188 95.68613 151.8231 95.34467 152.90431 95.00325 153.95705
94.66182 155.03825 94.32036 156.09099 93.97894 157.14372 93.63753 158.1965
93.29607 159.24924 92.95465 160.27353 92.61324 161.32626 92.27177 162.35056
91.93036 163.37485 91.58894 164.39915 91.24753 165.42345 90.90607 166.4193
90.56464 167.4436 90.22322 168.4394 89.88176 169.43527 89.54034 170.43109
89.19893 171.39851 88.85747 172.39432 88.51605 173.3617 88.17464 174.32912
87.83318 175.2965 87.49176 176.23544 87.15034 177.17438 86.80888 178.14175
86.46747 179.05222 86.12604 179.99117 85.78458 180.90167 85.44316 181.8406
85.10175 182.75107 84.76028 183.63309 84.41887 184.5436 84.07745 185.42563
83.736 186.30765 83.39458 187.18967 83.05316 188.04326 82.71175 188.89685
82.37029 189.75043 82.02885 190.60402 81.68744 191.42912 81.34598 192.25427
81.00456 193.07938 80.66315 193.90448 80.32169 194.70116 79.98027 195.49786
79.63885 196.29454 79.2974 197.06273 78.95598 197.83096 78.61456 198.5992
78.2731 199.36743 77.93169 200.10718 77.59026 200.84692 77.2488 201.55824
76.90738 202.29803 76.56596 203.00935 76.2245 203.69218 75.88309 204.4035
75.54167 205.08638 75.20021 205.76926 74.8588 206.42366 74.51738 207.07806
74.17596 207.73245 73.8345 208.35841 73.49307 208.98438 73.15166 209.61034
72.8102 210.2363 72.46878 210.83382 72.12737 211.40286 71.7859 212.00035
71.44449 212.56943 71.07458 213.13847 70.73317 213.67908 70.39175 214.21965
70.0503 214.76025 69.70888 215.27242 69.36746 215.78455 69.026 216.26823
68.68459 216.78041 68.34317 217.2641 68.00171 217.71935 67.6603 218.17456
67.31886 218.6298 66.9774 219.05663 66.63599 219.4834 66.29457 219.91017
65.95311 220.3085 65.6117 220.70688 65.27028 221.10521 64.92886 221.47507
64.5874 221.84497 64.24599 222.18639 63.90457 222.52785 63.56311 222.86926
63.22168 223.18224 62.88026 223.49522 62.5388 223.77972 62.19739 224.06427
61.85597 224.34882 61.51451 224.60487 61.1731 224.86093 60.83168 225.117
60.49022 225.34462 60.1488 225.57225 59.80739 225.77144 59.46593 225.97058
59.12451 226.16977 58.78308 226.34048 58.44162 226.51118 58.1002 226.65346
57.75879 226.79573 57.41733 226.93796 57.07591 227.0518 56.7345 227.16559
56.39308 227.25095 56.05162 227.3363 55.7102 227.42165 55.36879 227.47858
55.02733 227.53549 54.6859 227.56392 54.34448 227.5924 54.00302 227.62085
53.6616 227.62085 53.32019 227.62085 52.97873 227.5924 52.63731 227.56392
52.2959 227.53549 51.95444 227.47858 51.61302 227.42165 51.2716 227.3363
50.93015 227.25095 50.58873 227.16559 50.2473 227.0518 49.90584 226.93796
49.56442 226.79573 49.223 226.65346 48.88155 226.51118 48.54013 226.34048
48.19872 226.16977 47.8573 225.97058 47.51584 225.79988 47.17442 225.57225
46.83301 225.34462 46.49155 225.117 46.15012 224.88937 45.8087 224.63332
45.46724 224.37724 45.12582 224.0927 44.78441 223.8082 44.44295 223.49522
44.10153 223.18224 43.76012 222.86926 43.41866 222.55627 43.07724 222.21486
42.73582 221.84497 42.36592 221.47507 42.0245 221.10521 41.68304 220.73532
41.34163 220.33698 41.00021 219.93864 40.65875 219.51183 40.31734 219.08507
39.9759 218.6583 39.63445 218.20303 39.29303 217.74779 38.95161 217.2641
38.6102 216.78041 38.26874 216.29672 37.92732 215.81303 37.5859 215.30086
37.24445 214.76025 36.90303 214.24812 36.56161 213.70752 36.22015 213.13847
35.87872 212.59787 35.53731 212.02882 35.19585 211.4313 34.85443 210.86226
34.51302 210.2363 34.17155 209.63878 33.83014 209.01286 33.48872 208.3869
33.14726 207.76094 32.80585 207.10649 32.46443 206.4521 32.12297 205.7977
31.78156 205.11482 31.44012 204.43199 31.09866 203.72067 30.75725 203.0378
30.41583 202.32648 30.07442 201.61516 29.73296 200.87541 29.39154 200.13562
29.05013 199.39586 28.70866 198.62762 28.36725 197.85939 28.02583 197.0912
27.68437 196.32298 27.34294 195.5263 27.00153 194.72963 26.66006 193.93297
26.31865 193.10782 25.97723 192.31114 25.63577 191.45757 25.29436 190.63246
24.95294 189.77887 24.61148 188.95377 24.27007 188.07173 23.92865 187.21815
23.58719 186.33612 23.24577 185.45406 22.90434 184.57204 22.56288 183.69002
22.22147 182.77956 21.88005 181.86905 21.53864 180.95859 21.19717 180.01964
20.85576 179.10915 20.51434 178.1702 20.17288 177.23126 19.83147 176.26389
19.49005 175.32494 19.14859 174.35756 18.80716 173.39018 18.46574 172.4228
18.12428 171.45538 17.78287 170.45956 17.44145 169.46371 17.09999 168.4679
16.75858 167.47203 16.41716 166.47618 16.0757 165.45187 15.73428 164.42758
15.39287 163.40329 15.0514 162.37904 14.70999 161.35474 14.36856 160.33044
13.99867 159.27766 13.65726 158.22493 13.3158 157.17221 12.97438 156.11943
12.63295 155.0667 12.29153 154.01396 11.95007 152.93275 11.60866 151.88002
11.26724 150.79881 10.92578 149.71759 10.58437 148.63643 10.24295 147.5552
9.90149 146.474 9.56007 145.36435 9.21866 144.28317 8.8772 143.17352
8.53578 142.06383 8.19435 140.98267 7.85289 139.87302 7.51147 138.76337
7.17006 137.65372 6.8286 136.54407 6.48718 135.40593 6.14577 134.29628
5.8043 133.18663 5.46289 132.04855 5.12148 130.9389 4.78001 129.80077
4.4386 128.69112 4.09717 127.55302 3.75575 126.4149 3.41429 125.27681
3.07288 124.13873 2.73146 123.02908 2.39 121.89095 2.04858 120.75285
1.70717 119.61473 1.3657 118.47664 1.02429 117.33856 0.68288 116.20042
0.34142 115.06233 0.0 113.92421   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85358 SLW 0 0 1  setrgbcolor  /ArrowA { moveto } def /ArrowB { }
def  [ 341.43127 17.75444 341.08984 17.1569 340.74838 16.55943 340.40697
15.9619 340.06555 15.39287 339.72409 14.82382 339.38268 14.28322 339.04126
13.71417 338.6998 13.202 338.35838 12.66139 338.01697 12.14926 337.6755
11.6371 337.33409 11.15341 336.99266 10.66972 336.65125 10.18604 336.30978
9.73077 335.96837 9.27553 335.62695 8.82031 335.28549 8.39351 334.94408
7.96674 334.60266 7.53992 334.2612 7.14159 333.91978 6.74324 333.57837
6.3734 333.23691 6.0035 332.8955 5.63359 332.55406 5.29218 332.2126
4.95076 331.87119 4.63779 331.52977 4.3248 331.18831 4.01183 330.8469
3.72728 330.50548 3.44278 330.16402 3.15823 329.8226 2.90218 329.48119
2.64606 329.13972 2.41849 328.79831 2.19086 328.45688 1.96323 328.11546
1.76404 327.774 1.5649 327.43259 1.39418 327.0627 1.22343 326.72127
1.05272 326.37985 0.91049 326.03839 0.76822 325.69698 0.65439 325.35556
0.5406 325.0141 0.42676 324.67268 0.34142 324.33127 0.25606 323.9898
0.1707 323.64839 0.11378 323.30698 0.08534 322.96552 0.02843 322.6241
0.02843 322.28267 0.0 321.94121 0.0 321.5998 0.0 321.25838 0.02843
320.91692 0.05692 320.5755 0.11378 320.23409 0.1707 319.89262 0.22762
319.55121 0.31297 319.2098 0.39833 318.86838 0.51212 318.52692 0.62595
318.18549 0.73975 317.84407 0.88202 317.50261 1.02429 317.1612 1.16656
316.81978 1.33727 316.47832 1.5364 316.1369 1.70717 315.79549 1.90631
315.45403 2.13394 315.11261 2.36156 314.7712 2.58919 314.42973 2.84526
314.08832 3.10132 313.74689 3.35738 313.40543 3.64192 313.06401 3.92647
312.7226 4.23944 312.38113 4.55243 312.03972 4.8654 311.6983 5.20682
311.35684 5.54825 311.01543 5.91814 310.67401 6.28804 310.3326 6.6579
309.99113 7.05623 309.6497 7.45456 309.30829 7.85289 308.96683 8.27971
308.62541 8.70648 308.284 9.16173 307.94254 9.61699 307.60112 10.07219
307.2597 10.52745 306.91824 11.01114 306.57683 11.5233 306.23541 12.03543
305.89395 12.5476 305.55254 13.05972 305.2111 13.60034 304.86964 14.14095
304.52823 14.68155 304.18681 15.2506 303.84535 15.81964 303.50394 16.41716
303.16252 17.01463 302.82106 17.61217 302.47964 18.23813 302.13823
18.8356 301.79681 19.49005 301.45535 20.11601 301.11392 20.7704 300.7725
21.4248 300.43105 22.10768 300.08963 22.79051 299.74821 23.47339 299.40675
24.15627 299.06534 24.86758 298.69543 25.5789 298.35402 26.31865 298.0126
27.02997 297.67114 27.76971 297.32973 28.53795 296.98831 29.27771 296.64685
30.04594 296.30544 30.8426 295.96402 31.61084 295.62256 32.40752 295.28114
33.20418 294.93971 34.00085 294.59825 34.826 294.25684 35.65111 293.91542
36.47626 293.57396 37.3298 293.23254 38.15495 292.89113 39.00853 292.54971
39.89056 292.20825 40.74414 291.86684 41.62617 291.52542 42.5082 291.18396
43.39021 290.84253 44.30072 290.50111 45.21118 290.15965 46.12169 289.81824
47.03215 289.47682 47.97108 289.13536 48.88155 288.79395 49.8205 288.45253
50.75943 288.11107 51.7268 287.76965 52.69423 287.42824 53.63318 287.08678
54.60056 286.74536 55.59636 286.40393 56.56378 286.06247 57.5596 285.72105
58.55547 285.37964 59.55127 285.03818 60.54713 284.69676 61.543 284.35535
62.56729 284.01393 63.59158 283.67247 64.61588 283.33105 65.64018 282.98964
66.66443 282.64818 67.71721 282.30675 68.76994 281.96533 69.79424 281.62387
70.84697 281.28246 71.89973 280.94104 72.98091 280.59958 74.03369 280.25816
75.11485 279.91675 76.16763 279.57529 77.2488 279.23387 78.33002 278.89246
79.41122 278.551 80.4924 278.20958 81.60205 277.86815 82.68326 277.52669
83.79291 277.18527 84.87411 276.84386 85.98376 276.5024 87.09341 276.16098
88.20308 275.81956 89.31273 275.47815 90.42238 275.13669 91.53203 274.79527
92.64168 274.45386 93.7798 274.1124 94.88945 273.77097 96.02754 273.42955
97.13719 273.08809 98.27527 272.74667 99.38492 272.40526 100.52306
272.0638 101.66115 271.72238 102.79927 271.38097 103.90892 271.0395
105.04701 270.69809 106.18513 270.35667 107.32323 269.98677 108.46132
269.64536 109.59944 269.3039 110.73753 268.96248 111.87566 268.62106
113.01375 268.2796 114.15184 267.93819 115.28996 267.59676 116.42805
267.2553 117.56618 266.91388 118.70427 266.57246 119.84236 266.23105
120.98048 265.88959 122.11858 265.54817 123.2567 265.20676 124.36635
264.8653 125.50444 264.52388 126.64253 264.18246 127.78065 263.841
128.8903 263.49957 130.0284 263.15816 131.16652 262.8167 132.27617
262.47528 133.38582 262.13387 134.52391 261.7924 135.63356 261.45099
136.74321 261.10957 137.88135 260.76811 138.991 260.4267 140.10065
260.08528 141.18181 259.74382 142.29146 259.4024 143.40111 259.06097
144.48233 258.71951 145.59198 258.3781 146.67319 258.03668 147.75435
257.69527 148.86404 257.3538 149.94522 257.01239 150.998 256.67097
152.07916 256.32951 153.16037 255.9881 154.2131 255.64668 155.29433
255.30522 156.34706 254.96379 157.39983 254.62238 158.45256 254.28091
159.47685 253.9395 160.52959 253.59808 161.5539 253.25662 162.60661
252.9152 163.63092 252.57379 164.62677 252.23233 165.65106 251.89091
166.67537 251.5495 167.67117 251.20804 168.66704 250.86662 169.6629
250.52519 170.6587 250.18373 171.62613 249.84232 172.62195 249.5009
173.58932 249.15948 174.55675 248.81802 175.52412 248.47661 176.46307
248.1352 177.40201 247.79373 178.34091 247.45232 179.27985 247.1109
180.2188 246.76944 181.12929 246.42801 182.03975 246.0866 182.95026
245.74513 183.86072 245.40372 184.74274 245.0623 185.62482 244.72084
186.50684 244.37943 187.38885 244.03801 188.24245 243.69655 189.09604
243.35513 189.94957 243.01372 190.80316 242.67226 191.62831 242.33084
192.45341 241.98941 193.27852 241.61952 194.10367 241.2781 194.90034
240.93665 195.69702 240.59523 196.46524 240.2538 197.26192 239.91238
198.03015 239.57092 198.79834 239.2295 199.53813 238.88809 200.2779
238.54663 201.01764 238.20522 201.75743 237.8638 202.46875 237.52234
203.18007 237.18092 203.8629 236.83951 204.57422 236.49805 205.2571
236.15663 205.91148 235.8152 206.59436 235.47374 207.24876 235.13232
207.87473 234.79091 208.52913 234.44945 209.15509 234.10803 209.75261
233.76662 210.37857 233.42516 210.97604 233.08374 211.54514 232.74232
212.14262 232.40086 212.71165 232.05945 213.25227 231.71802 213.8213
231.3766 214.33348 231.03514 214.87408 230.69373 215.38622 230.35231
215.89838 230.01085 216.4105 229.66943 216.8942 229.32802 217.34946
228.98656 217.83315 228.64514 218.28839 228.30373 218.74364 227.96227
219.17041 227.62085 219.59718 227.27942 219.99556 226.93796 220.42233
226.59654 220.79224 226.25513 221.19057 225.91367 221.56042 225.57225
221.93033 225.23083 222.27174 224.88937 222.6132 224.54796 222.92618
224.20654 223.2676 223.86508 223.55214 223.52367 223.86508 223.18224
224.14963 222.84082 224.40569 222.49936 224.69023 222.15794 224.91785
221.81653 225.17392 221.47507 225.40154 221.13365 225.62917 220.79224
225.82831 220.45078 226.0275 220.10936 226.19821 219.76794 226.36893
219.42648 226.53963 219.08507 226.6819 218.74364 226.82417 218.40218
226.96645 218.06076 227.08023 217.71935 227.19408 217.37788 227.27942
217.03647 227.36478 216.69505 227.42165 216.35359 227.47858 216.01218
227.53549 215.67076 227.56392 215.3293 227.5924 214.98788 227.62085
214.64645 227.62085 214.30504 227.62085 213.96358 227.5924 213.62216
227.56392 213.25227 227.50705 212.91084 227.47858 212.56943 227.39322
212.22797 227.3363 211.88655 227.2225 211.54514 227.13715 211.20367
227.02332 210.86226 226.90953 210.52084 226.76726 210.17938 226.62498
209.83797 226.48276 209.49655 226.312 209.15509 226.1413 208.81367
225.94215 208.47224 225.74297 208.13078 225.51534 207.78937 225.3162
207.44795 225.06012 207.10649 224.8325 206.76508 224.57639 206.42366
224.29189 206.0822 224.00735 205.74078 223.72285 205.39937 223.43831
205.05795 223.12532 204.71649 222.7839 204.37506 222.47093 204.03365
222.12952 203.69218 221.75961 203.35077 221.38971 203.00935 221.01982
202.6679 220.62148 202.32648 220.22314 201.98506 219.82481 201.6436
219.39804 201.30219 218.97127 200.96077 218.54445 200.61931 218.0892
200.2779 217.63399 199.93646 217.1503 199.595 216.66656 199.25359 216.18288
198.91217 215.67076 198.57071 215.15858 198.2293 214.64645 197.88788
214.10585 197.54642 213.56525 197.205 213.02464 196.86359 212.4556
196.52217 211.88655 196.18071 211.28903 195.83928 210.71999 195.49786
210.09402 195.1564 209.49655 194.81499 208.87059 194.47357 208.24463
194.13211 207.59023 193.7907 206.96426 193.44928 206.28139 193.10782
205.62698 192.7664 204.9441 192.42499 204.26123 192.08353 203.5784
191.74211 202.86708 191.40068 202.15576 191.05922 201.41597 190.7178
200.70465 190.37639 199.9649 190.03493 199.19667 189.69351 198.45692
189.3521 197.68869 189.01064 196.9205 188.66922 196.12378 188.3278
195.35559 187.98639 194.53044 187.64493 193.73378 187.3035 192.9371
186.96208 192.112 186.62062 191.2584 186.2792 190.43326 185.93779 189.57973
185.59633 188.72614 185.25491 187.87254 184.88501 187.01897 184.5436
186.13693 184.20218 185.25491 183.86072 184.3729 183.5193 183.46239
183.17789 182.55193 182.83643 181.64142 182.49501 180.73096 182.1536
179.82045 181.81213 178.88152 181.47072 177.94257 181.12929 177.00368
180.78783 176.03625 180.44641 175.0973 180.105 174.12993 179.76353
173.16255 179.42212 172.19518 179.0807 171.19933 178.73929 170.23193
178.39783 169.23608 178.05641 168.24026 177.715 167.24442 177.37354
166.22011 177.0321 165.2243 176.69069 164.2 176.34923 163.1757 176.00781
162.15141 175.6664 161.09863 175.32494 160.07434 174.98352 159.0216
174.6421 157.99731 174.30064 156.94458 173.95923 155.8918 173.61781
154.81064 173.27635 153.75786 172.93494 152.67668 172.5935 151.62392
172.25204 150.54274 171.91063 149.46153 171.56921 148.38031 171.22775
147.29915 170.88634 146.1895 170.54492 145.10829 170.2035 144.02707
169.86205 142.91742 169.52063 141.80777 169.17921 140.69812 168.83775
139.58847 168.49632 138.47882 168.1549 137.36917 167.81345 136.25952
167.47203 135.14987 167.13062 134.04022 166.78915 132.90213 166.44774
131.79248 166.10632 130.65436 165.76486 129.54471 165.42345 128.40662
165.08203 127.2685 164.74057 126.15884 164.39915 125.02075 164.05772
123.88261 163.71626 122.74454 163.37485 121.60645 163.03343 120.46832
162.69197 119.33023 162.35056 118.1921 162.00914 117.05402 161.66772
115.91592 161.32626 114.7778 160.98485 113.63971 160.64343 112.50157
160.30197 111.3635 159.96054 110.2254 159.61913 109.08728 159.27766
107.97763 158.93625 106.83954 158.59483 105.7014 158.25337 104.56332
157.91196 103.42523 157.57054 102.28711 157.22908 101.14902 156.88766
100.03937 156.54625 98.90123 156.17635 97.76315 155.83493 96.6535 155.49347
95.51541 155.15205 94.40572 154.81064 93.26764 154.46918 92.15799 154.12776
91.04834 153.78633 89.93867 153.44487 88.82903 153.10345 87.71938 152.76204
86.60973 152.42062 85.50008 152.07916 84.39043 151.73775 83.30922 151.39633
82.19957 151.05487 81.11836 150.71346 80.03719 150.37204 78.92754 150.03058
77.84633 149.68915 76.7936 149.34773 75.71237 149.00627 74.63116 148.66486
73.57843 148.32344 72.49722 147.98198 71.44449 147.64056 70.39175 147.29915
69.33897 146.95769 68.28625 146.61627 67.26195 146.27486 66.20921 145.9334
65.18492 145.59198 64.16063 145.25055 63.13634 144.90909 62.14047 144.56767
61.11618 144.22626 60.12036 143.88484 59.09607 143.54338 58.1002 143.20197
57.13283 142.86055 56.13698 142.51909 55.1696 142.17767 54.20221 141.83626
53.23483 141.4948 52.26741 141.15337 51.30003 140.81195 50.3611 140.47049
49.42215 140.12907 48.48322 139.78766 47.54431 139.4462 46.63382 139.10478
45.72336 138.76337 44.81285 138.4219 43.90234 138.08049 43.02032 137.73907
42.13829 137.39761 41.25627 137.0562 40.37425 136.71477 39.49222 136.3733
38.63864 136.03189 37.78505 135.69048 36.95995 135.34906 36.10635 135.0076
35.2812 134.66618 34.4561 134.32477 33.65942 133.9833 32.86276 133.64189
32.06609 133.30048 31.26942 132.95901 30.50119 132.61758 29.73296 132.27617
28.96472 131.93471 28.19653 131.59329 27.45674 131.25188 26.717 130.91042
26.00568 130.569 25.26591 130.22758 24.55461 129.88612 23.87173 129.54471
23.16042 129.2033 22.47754 128.86183 21.7947 128.52042 21.14026 128.17899
20.48586 127.8091 19.83147 127.46768 19.2055 127.12622 18.57954 126.7848
17.95358 126.44337 17.3561 126.10196 16.75858 125.7605 16.16106 125.41908
15.59201 125.07767 15.02296 124.7362 14.45392 124.39479 13.91331 124.05338
13.37271 123.71191 12.8321 123.3705 12.31998 123.02908 11.8078 122.68762
11.29568 122.3462 10.812 122.00478 10.32831 121.66331 9.87305 121.3219
9.4178 120.98048 8.96254 120.63902 8.50734 120.2976 8.08052 119.95619
7.68219 119.61473 7.28386 119.27332 6.88551 118.9319 6.48718 118.59044
6.11728 118.24902 5.74744 117.9076 5.40598 117.56618 5.06456 117.22472
4.72313 116.8833 4.41016 116.54189 4.09717 116.20042 3.81264 115.85901
3.52814 115.5176 3.24359 115.17613 2.98752 114.83472 2.73146 114.4933
2.47536 114.15184 2.24773 113.81042 2.04858 113.469 1.82095 113.12753
1.62181 112.78612 1.45107 112.4447 1.28035 112.10324 1.10965 111.76183
0.93893 111.42041 0.79666 111.07895 0.68288 110.73753 0.56903 110.39612
0.45525 110.05466 0.36989 109.71324 0.28453 109.37181 0.19919 109.0304
0.14226 108.68893 0.08534 108.34752 0.05692 108.0061 0.02843 107.66464
0.0 107.32323 0.0 106.98181 0.0 106.64035 0.02843 106.29893 0.05692
105.95752 0.08534 105.61606 0.14226 105.27464 0.19919 104.93321 0.28453
104.59175 0.36989 104.25034 0.45525 103.90892 0.56903 103.56746 0.68288
103.22604 0.8251 102.88463 0.96738 102.54317 1.10965 102.20175 1.28035
101.86034 1.45107 101.51888 1.65025 101.17746 1.8494 100.83603 2.04858
100.49461 2.27621 100.15315 2.50383 99.81174 2.7599 99.44185 3.01596
99.10042 3.27202 98.759 3.55656 98.41754 3.84111 98.07613 4.1541 97.73471
4.4386 97.39325 4.78001 97.05183 5.09299 96.71042 5.43445 96.36896
5.8043 96.02754 6.17421 95.68613 6.5441 95.34467 6.91396 95.00325 7.31233
94.66182 7.7391 94.32036 8.13744 93.97894 8.56421 93.63753 9.01947
93.29607 9.44627 92.95465 9.92996 92.61324 10.38518 92.27177 10.86891
91.93036 11.3526 91.58894 11.86473 91.24753 12.37689 90.90607 12.88902
90.56464 13.42963 90.22322 13.97023 89.88176 14.51083 89.54034 15.07988
89.19893 15.64893 88.85747 16.21797 88.51605 16.81549 88.17464 17.41298
87.83318 18.03894 87.49176 18.63646 87.15034 19.29086 86.80888 19.91682
86.46747 20.57121 86.12604 21.22566 85.78458 21.88005 85.44316 22.56288
85.10175 23.24577 84.76028 23.92865 84.41887 24.63995 84.07745 25.35127
83.736 26.09103 83.39458 26.80234 83.05316 27.5421 82.71175 28.28189
82.37029 29.05013 82.02885 29.81831 81.68744 30.58655 81.34598 31.35478
81.00456 32.15144 80.66315 32.94812 80.32169 33.74478 79.98027 34.56989
79.63885 35.39503 79.2974 36.22015 78.95598 37.0453 78.61456 37.89888
78.2731 38.75243 77.93169 39.60602 77.59026 40.48804 77.2488 41.34163
76.90738 42.22365 76.56596 43.10567 76.2245 44.01617 75.88309 44.92664
75.54167 45.83714 75.20021 46.7476 74.8588 47.65811 74.51738 48.59705
74.17596 49.536 73.8345 50.47493 73.49307 51.41388 73.15166 52.38126
72.8102 53.34863 72.46878 54.31601 72.12737 55.28339 71.7859 56.25081
71.44449 57.24663 71.07458 58.24248 70.73317 59.23834 70.39175 60.23416
70.0503 61.23001 69.70888 62.2543 69.36746 63.25012 69.026 64.27441
68.68459 65.3272 68.34317 66.35149 68.00171 67.37575 67.6603 68.42851
67.31886 69.48125 66.9774 70.50555 66.63599 71.58676 66.29457 72.6395
65.95311 73.69223 65.6117 74.77344 65.27028 75.82617 64.92886 76.90738
64.5874 77.9886 64.24599 79.06976 63.90457 80.15099 63.56311 81.2322
63.22168 82.34184 62.88026 83.42305 62.5388 84.5327 62.19739 85.64235
61.85597 86.72353 61.51451 87.83318 61.1731 88.94283 60.83168 90.05247
60.49022 91.1906 60.1488 92.30025 59.80739 93.4099 59.46593 94.51955
59.12451 95.65764 58.78308 96.76729 58.44162 97.90543 58.1002 99.0435
57.75879 100.15315 57.41733 101.29129 57.07591 102.42938 56.7345 103.56746
56.39308 104.7056 56.05162 105.81525 55.7102 106.95332 55.36879 108.09146
55.02733 109.22955 54.6859 110.36763 54.34448 111.50577 54.00302 112.64384
53.6616 113.78198 53.32019 114.92007 52.97873 116.05815 52.63731 117.19629
52.2959 118.33437 51.95444 119.4725 51.61302 120.6106 51.2716 121.74867
50.93015 122.88681 50.58873 124.02489 50.2473 125.16302 49.90584 126.27267
49.56442 127.41077 49.223 128.54884 48.88155 129.65854 48.54013 130.79663
48.19872 131.90628 47.8573 133.04436 47.51584 134.154 47.17442 135.29214
46.83301 136.4018 46.49155 137.51144 46.15012 138.6211 45.8087 139.73074
45.46724 140.8404 45.12582 141.95004 44.78441 143.0597 44.44295 144.1409
44.10153 145.25055 43.76012 146.33173 43.41866 147.41293 43.07724 148.49416
42.73582 149.57536 42.36592 150.65654 42.0245 151.73775 41.68304 152.81895
41.34163 153.87169 41.00021 154.95291 40.65875 156.00563 40.31734 157.05836
39.9759 158.11115 39.63445 159.16388 39.29303 160.18817 38.95161 161.2409
38.6102 162.2652 38.26874 163.2895 37.92732 164.3138 37.5859 165.33809
37.24445 166.33395 36.90303 167.35825 36.56161 168.35406 36.22015 169.34991
35.87872 170.34573 35.53731 171.31316 35.19585 172.30898 34.85443 173.27635
34.51302 174.24377 34.17155 175.21115 33.83014 176.15009 33.48872 177.11746
33.14726 178.05641 32.80585 178.99535 32.46443 179.9058 32.12297 180.84476
31.78156 181.75525 31.44012 182.66571 31.09866 183.57622 30.75725 184.45824
30.41583 185.3687 30.07442 186.25078 29.73296 187.10431 29.39154 187.98639
29.05013 188.83992 28.70866 189.69351 28.36725 190.5471 28.02583 191.37221
27.68437 192.19736 27.34294 193.02246 27.00153 193.84761 26.66006 194.64429
26.31865 195.44095 25.97723 196.23763 25.63577 197.00586 25.29436 197.77405
24.95294 198.54228 24.61148 199.3105 24.27007 200.05026 23.92865 200.79005
23.58719 201.50137 23.24577 202.24112 22.90434 202.95244 22.56288 203.66376
22.22147 204.34663 21.88005 205.02946 21.53864 205.71234 21.19717 206.36674
20.85576 207.02113 20.51434 207.67558 20.17288 208.32997 19.83147 208.95593
19.49005 209.55342 19.14859 210.17938 18.80716 210.7769 18.46574 211.37439
18.12428 211.94347 17.78287 212.51251 17.44145 213.08156 17.09999 213.62216
16.75858 214.16277 16.41716 214.70338 16.0757 215.2155 15.73428 215.72768
15.39287 216.2398 15.0514 216.7235 14.70999 217.20718 14.36856 217.69087
13.99867 218.14612 13.65726 218.60136 13.3158 219.02814 12.97438 219.45496
12.63295 219.88173 12.29153 220.28006 11.95007 220.6784 11.60866 221.07674
11.26724 221.44662 10.92578 221.81653 10.58437 222.15794 10.24295 222.49936
9.90149 222.84082 9.56007 223.15376 9.21866 223.46674 8.8772 223.77972
8.53578 224.06427 8.19435 224.32033 7.85289 224.60487 7.51147 224.86093
7.17006 225.08856 6.8286 225.3162 6.48718 225.54381 6.14577 225.77144
5.8043 225.97058 5.46289 226.1413 5.12148 226.312 4.78001 226.48276
4.4386 226.65346 4.09717 226.79573 3.75575 226.90953 3.41429 227.0518
3.07288 227.13715 2.73146 227.25095 2.39 227.3363 2.04858 227.42165
1.70717 227.47858 1.3657 227.53549 1.02429 227.56392 0.68288 227.5924
0.34142 227.62085 0.0 227.62085   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85358 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 15194 66060 a Fe(Figura)h(2:)g(Las)g(funciones)f(seno)h(y)
g(coseno)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
25578 70015 a(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
